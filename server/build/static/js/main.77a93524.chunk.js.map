{"version":3,"sources":["StaticComponents/hostpathtutorial.png","StaticComponents/reqspersecforks.png","StaticComponents/datafetch.png","StaticComponents/editdelete.png","StaticComponents/selectreport.png","StaticComponents/checkbox.png","StaticComponents/report.png","StaticComponents/runreport.png","Axios/axiosroutes.js","Validator/Validator.js","StatefulComponents/SubmitForm/HeadersList.js","StatefulComponents/SubmitForm/AddHeader.js","StatefulComponents/SubmitForm/PathList.js","StatefulComponents/SubmitForm/SubmitForm.js","StaticComponents/ServerStrip.js","StatefulComponents/SubmitForm/CreateForm.js","StatefulComponents/Nav/Nav.js","StatefulComponents/ListComponent/FormList.js","StatefulComponents/ListComponent/Report.js","StatefulComponents/ListComponent/ReportList.js","StatefulComponents/RunListComponent/RunList.js","StaticComponents/Tutorial.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","a","axios","url","method","validateStatus","post_axios","postobj","data","get_axios","methods","get","put","post","delete","notNullUndefinedString","property","notNullUndefined","undefined","notFalsy","numberCheck","number_value","numConversion","Number","validNumber","zero_padding_test","test","validatePathReport","pathReport","validPathReport","reportLenght","Object","keys","report_i","reqres_pair","req","res","headers","body","status","checkProperty","prop","prop_value","validProps","whitespace_found","validatePaths","multipleForwardSlash","forwardSlash","invalidCharFound","headersObject","validHeaders","i","length","headerValue","headerKey","validateHeaders","Array","pathlist","valid_paths","isArray","selectedPathObject","path","validateRequestProps","testsetname","host","port","reqspersecond","secondduration","forks","testsetname_test","datafetch","host_test","method_test","pathlist_test","port_test","reqspersecond_test","secondduration_test","forks_test","validateDataProps","datapath","datahost","dataport","datamethod","dataheaders","databody","datafetch_test","datapath_test","datahost_test","dataport_test","datamethod_test","dataheaders_test","databody_test","HeadersList","props","headers_name","readonly","formState","setForm","table_contents","header_keys","header_length","removeHeader","e","name","target","formStateCopy","map","colSpan","type","className","value","onClick","disabled","style","color","height","overflow","scope","AddHeader","useState","new_header","set_new_header","headerWarnings","setHeaderWarnings","btnDisabled","onChange","new_header_copy","warnings_copy","emptyValue","class","for","id","addHeader","PathList","pathIndex","pathObject","ret_row","index","splice","removePath","AddPathToList","setPath","methodbuffer","setMethodBuffer","insertionIndex","setIndex","validPathInput","setValidPathInput","pathgood","placeholder","min","max","formCopy","validpathlist","prepForm","buildButtonOptions","formtype","setStatus","resetForm","setResetForm","setWarning","setReloadNames","buttonOptions","httpFunction","then","resp","prevState","err","testset","preppedForm","buildWarningBools","protocol","SubmitForm","formWarnings","preventDefault","formWarningsCopy","empty_string","buildTextNumberInput","field_name","labelText","validtext","invalidText","input_type","min_number","getDisabledStatus","buildSelect","label","options","valid_msg","option","useEffect","title","getFormTitle","ret_val","invalid_label","valid_label","validForm","validRequestProps","validDataProps","console","log","validateForm","buildFormFooter","ServerStrip","text_className","code_200_msg","code_204_msg","code_400_msg","code_500_msg","CreateForm","Fragment","Nav","background","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","FormList","selectedTestSetName","reloadTestsetNames","testsetnames","settestsetnames","dropdown_options","selectedTestsetName","setSelectedTestsetName","selectedForm","setSelectedForm","formtype_option","setOption","gettestsetnames_handler","get_testsetnames","namesarray","ret","dbObj","process_testsetnames","testsetname_string","fetchingdata","Promise","list","buildSelects","retForm","buildSubmitFormFromFormType","NumberSelect","report_length","setSelectedIndex","selectedReqResIndex","report","indexWarning","setIndexWarning","indexValue","Report","pathList","setPathList","selectedPath","setSelectedPath","selectedPathReport","setSelectedPathReport","setReportLength","selectedTestSet","selectedReportName","msg","DataRender","display_type","ret_element","headerProperties","headers_rows","headerName","table_row_header","push","processHeaderData","JSON","stringify","paths","report_len","processServerResponse","server_array","array_element","server_array_i","buildStatusCodeCheckObject","path_keys","path_report","path_report_length","res_status","statusCodes","reqres_i","filterLoadedReport","loadedReportObject","status_filter","filteredObject","path_report_object","pathobject","filteredPathObject","filtered_i","reqrespair","unfilitered_length","unfilitered_i","filterReportsOnPath","findReport","reportName","reportValues","returnReport","retVal","length_reports","report_object","report_value","renderReport","filteredTestsetReports","testsetReports","validReports","pathKeys","path_len","pathKey","pathKey_i","validateTestSetReports","ReportList","setTestsetNames","testsetReportNames","setTestsetReportsNames","testsetReportsValues","setTestsetReportsValues","setSelectedTestSetName","setSelectedPathReportName","selectedReport","setSelectedReport","setFilteredLoadedReportObject","checkBoxFilter","setCheckBoxFilter","reportToRender","validTestsetName","setValidTestsetName","testname_valid","statusFilterOnChange","checked","checkBoxFilterObjectCopy","response","testsetnames_response","obj","ret_object","validateArrayResp","valid_name","alert","processedArray","selectedReport_Value","checkBoxFilter_value","notFalsyTestsetReports","checkFilter","filteredReport","checkObject","statusArray","statusKeysIterator","statusKeys","indexOf","buildStatusArrayFromCheckObject","RunList","setTestsetnames","setReportName","validReportName","setValidReportName","emptytestsets","prop_name","testsetname_value","report_name_value","validPropAsync","report_name","checkServerForExistance","processedTestsetnames","processTestsetArray","notFalsie","validReqProps","validateTestSet","Tutorial","src","hostpath","0","1","2","forksports","username","password","editdelete","selectreport","checkbox","runreport","appMargin","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,4RCa3C,sBAAAC,EAAA,+EACSC,IAAM,CACXC,IAAK,mBACLC,OAfQ,MAgBRC,eAAgB,kBAAM,MAJ1B,4C,sBAkBA,SAASC,EAAWH,EAAKI,GACvB,OAAOL,IAAM,CACXC,IAAKA,EACLC,OA/BK,OAgCLI,KAAMD,EACNF,eAAgB,kBAAM,KAI1B,SAASI,EAAUN,GACjB,OAAOD,IAAM,CACXC,IAAKA,EACLC,OA1CQ,MA2CRC,eAAgB,kBAAM,KCvC1B,IAAMK,EAAU,CAAEC,IAAK,MAAOC,IAAK,MAAOC,KAAM,OAAQC,OAAQ,UA0ChE,SAASC,EAAuBC,GAC9B,MAAoB,cAAbA,GAAyC,SAAbA,EAGrC,SAASC,EAAiBD,GACxB,OAAoB,OAAbA,QAAkCE,IAAbF,EAE9B,SAASG,EAASH,GAChB,OACEC,EAAiBD,IACJ,KAAbA,GACa,IAAbA,GACAD,EAAuBC,GAI3B,SAASI,EAAYC,GACnB,IAAIC,EAAgBC,OAAOF,GACvBG,EAAuC,kBAAlBF,EAErBG,EAAoB,YACZA,EAAkBC,KAAKL,GASnC,OAPIG,IACFA,EACEF,EAAgB,IAAM,GACtBA,GAAiB,IAPL,WAQDI,KAAKJ,EAAgB,MAC/BG,EAAkBC,KAAKL,IAErBG,EAqBT,SAASG,EAAmBC,GAC1B,IAAIC,EAAkBV,EAASS,IAAqC,kBAAfA,EAErD,GAAID,EAEF,IADA,IAAIG,EAAeC,OAAOC,KAAKJ,GAEzBK,EAAW,EACfA,EAAWH,GAAgBD,EAC3BI,IACA,CACA,IAAIC,EAAcN,EAAWK,EAAW,IAExC,GADAJ,EAAkBV,EAASe,GACN,CAAC,IACdC,EAAaD,EAAbC,IAAKC,EAAQF,EAARE,IACPjB,EAASgB,IAAQhB,EAASiB,KAEzBnB,EAAiBkB,EAAIE,UACrBpB,EAAiBkB,EAAIG,OACrBrB,EAAiBmB,EAAIC,UACrBpB,EAAiBmB,EAAIE,OACrBrB,EAAiBmB,EAAIG,WAInBV,GAAkB,IAK/B,OAAOA,EAmCT,SAASW,EAAcC,EAAMC,GAE3B,IAAIC,GAAa,EACbC,EAAmB,QAMvB,GAHAD,EACE1B,EAAiByB,IAAe3B,EAAuB2B,GAGvD,OAAQD,GACN,IArJc,cAsJZE,EACExB,EAASuB,KACR,sBAAsBhB,KAAKgB,IACN,kBAAfA,EACT,MACF,IA5Jc,cA6Jd,IAtKW,WAuKX,IA9KO,OA+KLC,EACExB,EAASuB,KACR,sBAAsBhB,KAAKgB,KAC3BE,EAAiBlB,KAAKgB,IACD,kBAAfA,EACT,MACF,IA3Ka,aA4KXC,OAAqCzB,IAAxBR,EAAQgC,GACrB,MACF,IA7KY,YA8KVC,EAA4B,SAAfD,GAAwC,UAAfA,EACtC,MACF,IA1LO,OA2LP,IApLW,WAqLX,IAxLQ,QAyLR,IA1LgB,gBA2LhB,IAzLiB,iBA0LfC,EAAavB,EAAYsB,GACzB,MACF,IAhMS,SAiMPC,EAAaxB,EAASuB,IAAevB,EAAST,EAAQgC,IACtD,MACF,IAlMW,WAmMTC,EAAaE,EAAcH,GAC3B,MACF,IA/LW,WAgMT,IAAII,GA1CqB,QA0C4BpB,KAAKgB,GACtDK,EAAe,MAAMrB,KAAKgB,GAC1BM,EAAmB,uCAAuCtB,KAC5DgB,GAEFC,EACiB,KAAfD,GACCK,IAAiBC,GAAoBF,EACxC,MACF,IAtMc,cAuMZH,EA1IR,SAAyBM,GAQvB,IAPA,IAAIC,EAAe/B,EAAS8B,GACxBjB,EAAOD,OAAOC,KAAKiB,GACnBE,EAAI,EACJC,EAASpB,EAAKoB,OACdC,EAAc,KACdC,EAAY,KAETH,EAAIC,GAAUF,GAEnBG,EAAcJ,EADdK,EAAYtB,EAAKmB,IAEjBD,EAAe/B,EAASmC,IAAcnC,EAASkC,GAC/CF,IAGF,OAAOD,EA2HYK,CAAgBb,GAC7B,MACF,IAxMW,WAyMTC,EACE1B,EAAiByB,IAAqC,kBAAfA,EACzC,MACF,IA1Mc,cA2MZC,EAAaD,aAAsBc,MACnC,MACF,IA1MS,SA2MPb,EAAaxB,EAASuB,KAAgBE,EAAiBlB,KAAKgB,GAIlE,OAAOC,EA0BT,SAASE,EAAcY,GACrB,IAAIC,EAAcF,MAAMG,QAAQF,GAC5BG,EAAqB,KAEzB,GAAIF,EAGF,IAFA,IAAIN,EAASK,EAASL,OAEbD,EAAI,EAAGA,EAAIC,GAAUM,EAAaP,IAEzCO,EACEvC,EAFFyC,EAAqBH,EAASN,KAG5BpC,EAAuB6C,IACvBpB,EAAc,WAAYiB,EAASN,GAAGU,MAG5C,OAAOH,EAGT,SAASI,EAAT,GAUI,IATFC,EASC,EATDA,YACAC,EAQC,EARDA,KACA5D,EAOC,EAPDA,OACAqD,EAMC,EANDA,SACAQ,EAKC,EALDA,KACAC,EAIC,EAJDA,cACAC,EAGC,EAHDA,eACAC,EAEC,EAFDA,MAIIC,GAFH,EADDC,UAGuB9B,EAAc,cAAeuB,IAChDQ,EAAY/B,EAAc,OAAQwB,GAClCQ,EAAchC,EAAc,SAAUpC,GACtCqE,EAAgB5B,EAAcY,GAC9BiB,EAAYlC,EAAc,OAAQyB,GAClCU,EAAqBnC,EAAc,gBAAiB0B,GACpDU,EAAsBpC,EAAc,iBAAkB2B,GACtDU,EAAarC,EAAc,QAAS4B,GAExC,OACEC,GACAE,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EAIJ,SAASC,EAAT,GAQI,IAPFR,EAOC,EAPDA,UACAS,EAMC,EANDA,SACAC,EAKC,EALDA,SACAC,EAIC,EAJDA,SACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,YACAC,EACC,EADDA,SAEIC,EAAiB7C,EAAc,YAAa8B,GAC5CgB,EAAgB9C,EAAc,WAAYuC,GAC1CQ,EAAgB/C,EAAc,WAAYwC,GAC1CQ,EAAgBhD,EAAc,WAAYyC,GAC1CQ,EAAkBjD,EAAc,aAAc0C,GAC9CQ,EAAmBlD,EAAc,cAAe2C,GAChDQ,EAAgBnD,EAAc,WAAY4C,GAE9C,OACEC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,EC5PWC,MA7Ef,SAAqBC,GAAQ,IACrBC,EAA+CD,EAA/CC,aAAcC,EAAiCF,EAAjCE,SAAUC,EAAuBH,EAAvBG,UAAWC,EAAYJ,EAAZI,QACrCC,EAAiB,iDACjBC,EAAc,KACdC,GAAiB,EACjB/D,EAAU2D,EAAUF,GAExB,SAASO,EAAaC,GAAI,IAClBC,EAASD,EAAEE,OAAXD,KACFE,EAAa,eAAQT,GAGvB/E,EAAiBsF,IACjBtF,EAAiB+E,EAAUF,GAAcS,aAElCE,EAAcX,GAAcS,GACnCN,EAAQQ,IAuCZ,OAnCItF,EAASkB,KAEX+D,GADAD,EAAcpE,OAAOC,KAAKgE,EAAUF,KACR1C,QAM5B8C,EAFEE,EAAgB,EAEDD,EAAYO,KAAI,SAACpD,GAAD,OAC/B,4BACE,wBAAIqD,QAAQ,KAAKrD,GACjB,wBAAIqD,QAAQ,KAAKtE,EAAQiB,IACzB,wBAAIqD,QAAQ,KACV,2BACEJ,KAAMjD,EACNqD,QAAQ,IACRC,KAAK,SACLC,UAAWd,EAAW,oBAAsB,kBAC5Ce,MAAOf,EAAW,GAAK,gBACvBgB,QAASV,EACTW,SAAUjB,SAOhB,4BACE,wBAAIY,QAAQ,IAAIE,UAAU,4BAA1B,2BAQJ,yBACEA,UAAU,SACVI,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,SAAU,SAEpD,wBAAIP,UAAU,oBACZ,0BAAMA,UAAU,wBAAhB,kBAEF,2BAAOA,UAAU,mCACf,+BACE,4BACE,wBAAIQ,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,gBACA,wBAAIA,MAAM,SAEXnB,MCqDIoB,MA3Hf,SAAmBzB,GAAO,IAElBG,EAAqCH,EAArCG,UAAWC,EAA0BJ,EAA1BI,QAASH,EAAiBD,EAAjBC,aAFF,EAGWyB,mBAAS,CAAEhB,KAAM,GAAIO,MAAO,KAHvC,mBAGnBU,EAHmB,KAGPC,EAHO,OAIkBF,mBAAS,CACjDhB,MAAM,EACNO,OAAO,IANe,mBAInBY,EAJmB,KAIHC,EAJG,KASlBC,GACHpF,EAAc,SAAUgF,EAAWjB,QACnC/D,EAAc,SAAUgF,EAAWV,OAXd,EAYES,mBAAS,OAZX,mBAaxB,SAASM,EAASvB,GAAI,IAAD,EACGA,EAAEE,OAAlBD,EADa,EACbA,KAAMO,EADO,EACPA,MACRgB,EAAe,eAAQN,GACvBO,EAAa,eAAQL,GAGzB,GAAa,SAATnB,EAAiB,CACnB,IAAIyB,EAAuB,KAAVlB,GAFC,iCAICpF,KAAKoF,IAAUkB,GAChCF,EAAe,KAAWhB,EAC1BiB,EAAa,KAAWC,GAExBD,EAAa,MAAW,OAG1BA,EAAa,MAAsB,KAAVjB,EACzBgB,EAAe,MAAYhB,EAE7BW,EAAeK,GACfH,EAAkBI,GAkBpB,OAnDwB,UAoDtB,yBAAKE,MAAM,mBACT,yBAAKA,MAAM,8BACT,2BAAOC,IAAI,eAAX,eACA,2BACE3B,KAAK,OACLK,KAAK,OACLC,UAAU,eACVC,MAAOU,EAAWjB,KAClBsB,SAAUA,IAEXH,EAAenB,KACd,0BAAMM,UAAU,0BACb,oEAGH,0BAAMoB,MAAM,0BAAZ,gCAKJ,yBAAKpB,UAAU,8BACb,2BAAOqB,IAAI,gBAAX,gBACA,2BACE3B,KAAK,QACLK,KAAK,OACLC,UAAU,eACVC,MAAOU,EAAWV,MAClBe,SAAUA,IAEXH,EAAeZ,MACd,0BAAMD,UAAU,0BACb,oEAGH,0BAAMoB,MAAM,0BAAZ,gCAMJ,yBAAKA,MAAM,+BACT,2BAAOC,IAAI,gBAAgBrB,UAAU,cAArC,iCAGA,2BACED,KAAK,SACLC,UACEe,EACI,+CACA,+CAENd,MAAOc,EAAc,YAAc,gBACnCO,GAAG,gBACHpB,QAAS,SAACT,GAAD,OArEjB,SAAmBA,GAEjB,IAAIG,EAAa,eAAQT,GACnBO,EAAgBiB,EAAhBjB,KAAMO,EAAUU,EAAVV,MAEVtE,EAAc,SAAU+D,IACxB/D,EAAc,SAAUsE,SACU5F,IAAlC8E,EAAUF,GAAcS,KAExBP,EAAUF,GAAcS,GAAQO,EAChCb,EAAQQ,GACRgB,EAAe,CAAElB,KAAM,GAAIO,MAAO,MA0DdsB,IAChBpB,SAAUY,IAEXF,EAAeZ,OAASY,EAAenB,KACtC,0BAAMM,UAAU,0BAAhB,2FAKA,0BAAMoB,MAAM,0BAAZ,oC,QC9GV,SAASI,EAASxC,GAAQ,IAClBG,EAAiCH,EAAjCG,UAAWC,EAAsBJ,EAAtBI,QAASF,EAAaF,EAAbE,SACtBuC,EAAY,EAwBhB,IAAIpC,EArBFjF,EAAiB+E,EAAUvC,WAC3BD,MAAMG,QAAQqC,EAAUvC,WACxBuC,EAAUvC,SAASL,QAAU,EAoB7B4C,EAAUvC,SAASiD,KAAI,SAAC6B,GAAgB,IAChC1E,EAAiB0E,EAAjB1E,KAAMzD,EAAWmI,EAAXnI,OACRoI,EACF,4BACE,4BAAKF,GACL,4BAAKzE,GACL,4BAAKzD,GACL,4BACE,2BACEwG,KAAK,SACLC,UAAU,0BACVN,KAAM+B,EACNxB,MAAM,cACNC,QAAS,SAACT,GAAD,OA/BrB,SAAoBA,GAAI,IAChB7C,EAAauC,EAAbvC,SACFgF,EAAQlH,OAAO+E,EAAEE,OAAOD,MACxBE,EAAa,eAAQT,GAGvBxC,MAAMG,QAAQF,IACdgF,GAAS,GACTA,EAAQhF,EAASL,QACjBnC,EAAiBwC,EAASgF,MAG1BhC,EAAchD,SAASiF,OAAOD,EAAO,GACrCxC,EAAQQ,IAkBgBkC,CAAWrC,IAC3BU,SAAUjB,MAOlB,OAFAuC,IAEOE,KAGT,4BACE,wBAAI7B,QAAQ,IAAIE,UAAU,gBAA1B,wBAMJ,OACE,yBAAKA,UAAU,UACb,yBAAKI,MAAO,CAAEE,OAAQ,QAASC,SAAU,SACvC,2BAAOP,UAAU,iCACf,4BACE,wBAAIF,QAAQ,KAAZ,kBACA,wBAAIA,QAAQ,KAAZ,QACA,wBAAIA,QAAQ,KAAZ,eACA,wBAAIA,QAAQ,OAEbT,KAOX,SAAS0C,EAAc/C,GAAQ,IACvBG,EAAuBH,EAAvBG,UAAWC,EAAYJ,EAAZI,QACXxC,EAAauC,EAAbvC,SAFsB,GAGhBD,MAAMG,QAAQF,IAAYA,EAASL,OAEzBmE,mBAAS,KALH,mBAKvB1D,EALuB,KAKjBgF,EALiB,OAMUtB,mBAAS,OANnB,mBAMvBuB,EANuB,KAMTC,EANS,OAOKxB,mBAASvB,EAAUvC,SAASL,QAPjC,mBAOvB4F,EAPuB,KAOPC,EAPO,OAQc1B,oBAAS,GARvB,mBAQvB2B,EARuB,KAQPC,EARO,KAW5B,SAAStB,EAASvB,GAAI,IH2QAlG,EG3QD,EACGkG,EAAEE,OAAlBD,EADa,EACbA,KAAMO,EADO,EACPA,MAEZ,GAAa,SAATP,EAAiB,CAEnB,IAAI6C,EAAW5G,EAAc,WAAYsE,GACrCsC,GAAUP,EAAQ/B,GACtBqC,EAAkBC,OACA,iBAAT7C,GHqQA,SAFSnG,EGjQC0G,IHoQV,QAAX1G,GACW,SAAXA,GACW,WAAXA,IGrQI2I,EAAgBjC,GAEA,UAATP,GAEL5C,kBAAQqC,EAAUvC,WAAaqD,GAASrD,EAASL,QACnD6F,EAASnC,GA4Bf,OACE,yBAAKD,UAAU,mBACb,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,cAAX,gBACA,2BACEtB,KAAK,OACLC,UAAU,eACVC,MAAOjD,EACPwF,YAAY,iCACZ9C,KAAK,OACLsB,SAAU,SAACvB,GAAD,OAAOuB,EAASvB,MAE3B4C,EACC,0BAAMrC,UAAU,0BAAhB,eAEA,0BAAMA,UAAU,yBAAhB,4IAOJ,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,SAAX,mBACA,2BACE3B,KAAK,QACLK,KAAK,SACL0C,IAAK,EACLC,IAAK5F,kBAAQF,GAAYA,EAASL,OAAS,EAC3CyD,UAAU,eACVC,MAAOkC,EACPnB,SAAU,SAACvB,GAAD,OAAOuB,EAASvB,OAG9B,yBAAK2B,MAAM,8BACT,2BAAOC,IAAI,gBAAX,yBACA,4BACEC,GAAG,cACHtB,UAAU,eACVgB,SAAU,SAACvB,GACTuB,EAASvB,IAEXC,KAAK,gBAEL,4BAAQO,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,YAGJ,yBAAKD,UAAU,8BACb,2BAAOqB,IAAI,eAAerB,UAAU,cAApC,2BAGA,2BACED,KAAK,SACLC,UAAU,uCACVC,MAAM,eACNqB,GAAG,eACHpB,QApFR,WACE,IAAIyC,EAAQ,eAAQxD,GACdvC,EAAa+F,EAAb/F,SACFgG,EAAgB9F,kBAAQF,GACxB8E,EAAa,GAGf/F,EAAc,OAAQqB,IACtB4F,GACAT,GAAkB,GAClBA,GAAkBvF,EAASL,QAE3BmF,EAAU,OAAaO,EACvBP,EAAU,KAAW1E,EACrBJ,EAASiF,OAAOM,EAAgB,EAAGT,GACnCtC,EAAQuD,GACRX,EAAQ,IACRE,EAAgB,OAChBE,EAASjD,EAAUvC,SAASL,QAC5B+F,GAAkB,IAElBA,GAAkB,Q,MCzFxB,SAASO,EAAS1D,GAYhB,MATkB,UAFEA,EAAd1B,YAGJ0B,EAAUhB,SAAW,GACrBgB,EAAUf,SAAW,EACrBe,EAAUd,WAAa,GACvBc,EAAUjB,SAAW,GACrBiB,EAAUb,YAAc,GACxBa,EAAUZ,SAAW,IAGhBY,EAcT,SAAS2D,EACPC,EACA5D,EACA6D,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAgB,KACpB,OAAQN,GACN,IA5CgB,cA6CdM,EAAgB,CACdrD,UAAW,2BACXC,MAAO,kBAAoBd,EAAUjC,YACrCoG,aAAc,WACZ7J,EAAW,iBAAkB,CAC3ByD,YAAaiC,EAAUjC,cACtBqG,MACD,SAACC,GACCR,EAAUQ,EAAK9H,QAEK,MAAhB8H,EAAK9H,QACP0H,GAAe,SAACK,GAAD,OAAgBA,QAGnC,SAACC,GACCV,EA1DI,YA+DZ,MACF,IAnEc,YAoEZK,EAAgB,CACdrD,UAAW,2BACXC,MAAO,kBAAoBd,EAAUjC,YACrCoG,aAAc,WACZ,ILpDgBK,EKoDZC,EAAcf,EAAS1D,ILpDXwE,EKqDCC,ELpDlBvK,IAAM,CACXC,IAAK,eACLC,OAzDK,OA0DLI,KAAMgK,EACNnK,eAAgB,kBAAM,MKgDc+J,MAC5B,SAACC,GACCR,EAAUQ,EAAK9H,WAEjB,SAACgI,GACCV,EA3EI,YAgFZ,MACF,IAlFiB,eAmFfK,EAAgB,KAChB,MACF,QACEA,EAAgB,CACdrD,UAAW,2BACXC,MAAO,qBACPqD,aAAc,WAEZ7J,EAAW,iBADOoJ,EAAS1D,IACeoE,MACxC,SAACC,GACCR,EAAUQ,EAAK9H,QAEK,MAAhB8H,EAAK9H,SACPwH,GAAcD,GACdE,EAAWU,EAAkB1E,QAGjC,SAACuE,GACCV,EApGI,YA4GhB,OAAOK,EAGT,SAASQ,EAAkB1E,GAAW,IAGlChC,EAYEgC,EAZFhC,KACAP,EAWEuC,EAXFvC,SACAM,EAUEiC,EAVFjC,YACAE,EASE+B,EATF/B,KACAG,EAQE4B,EARF5B,MACAF,EAOE8B,EAPF9B,cACAC,EAME6B,EANF7B,eACAG,EAKE0B,EALF1B,UACAU,EAIEgB,EAJFhB,SACAC,EAGEe,EAHFf,SACAF,EAEEiB,EAFFjB,SAEEiB,EADFd,WAGF,MAAO,CACLlB,MAAOxB,EAAc,OAAQwB,GAC7B2G,UAAU,EACV5G,aAAcvB,EAAc,cAAeuB,GAC3CN,UAAWjB,EAAc,WAAYiB,GACrCQ,MAAOzB,EAAc,OAAQyB,GAC7B7D,QAAQ,EACRiC,SAAS,EACT+B,OAAQ5B,EAAc,QAAS4B,GAC/BF,eAAgB1B,EAAc,gBAAiB0B,GAC/CC,gBAAiB3B,EAAc,iBAAkB2B,GACjDG,WAAY9B,EAAc,YAAa8B,GACvCU,UAAWxC,EAAc,WAAYwC,GACrCC,UAAWzC,EAAc,WAAYyC,GACrCC,YAAY,EACZH,UAAWvC,EAAc,WAAYuC,GACrCI,aAAa,EACbC,UAAU,GAId,SAASwF,EAAW/E,GAAO,IAKvB+D,EASE/D,EATF+D,SACA5D,EAQEH,EARFG,UACAC,EAOEJ,EAPFI,QACA6D,EAMEjE,EANFiE,UACAC,EAKElE,EALFkE,aACAE,EAIEpE,EAJFoE,eAGAJ,GACEhE,EAFFtD,OAEEsD,EADFgE,WAbuB,EAeQtC,mBAASmD,EAAkB1E,IAfnC,mBAepB6E,EAfoB,KAeNb,EAfM,KAiBnBE,EAAgBP,EACpBC,EACA5D,EACA6D,EACAC,EACAC,EACAC,EACAC,GAUF,SAASpC,EAASvB,GAChBA,EAAEwE,iBADiB,MAGSxE,EAAEE,OAAxBD,EAHa,EAGbA,KAAMO,EAHO,EAGPA,MAAOF,EAHA,EAGAA,KACfH,EAAa,eAAQT,GACrB+E,EAAgB,eAAQF,GAExBG,EAAwB,SAATpE,GAA6B,KAAVE,EADjBtE,EAAc+D,EAAMO,IAGT,SAATF,GAA6B,KAAVE,GAIxCL,EAAcF,GAAQO,EACtBb,EAAQQ,GAEHsE,EAAiBxE,KADtByE,GAGKD,EAAiBxE,IAAQ,EAEhCyD,EAAWe,GACXlB,EAAU,MAIZ,SAASoB,EACPC,EACAC,EACA9B,EACA+B,EACAC,EACAC,EACAC,GAEA,OACE,yBAAKtD,MA/NO,8BAgOV,2BAAOC,IAAKgD,GAAaC,GACzB,2CACMI,EADN,CAEE3E,KAAM0E,EACNzE,UAAU,eACVsB,GAAI+C,EACJ3E,KAAM2E,EACN7B,YAAaA,EACbvC,MAAOd,EAAUkF,GACjBrD,SAAU,SAACvB,GAAD,OAAOuB,EAASvB,IAC1BU,SAvOU,gBAuOA4C,KAKTiB,EAAaK,GAGZ,0BAAMjD,MAAM,yBAAyBoD,GAFrC,0BAAMpD,MAAM,0BAA0BmD,IAShD,SAASI,IACP,MAvPgB,gBAuPT5B,GAtPU,iBAsPkBA,EAMrC,SAAS6B,EAAYP,EAAYQ,EAAOC,EAASC,GAC/C,OACE,yBAAK3D,MAlQO,8BAmQV,2BAAOC,IAAKgD,GAAaQ,GACzB,4BACEvD,GAAI+C,EACJpE,MAAOd,EAAUkF,GACjBrD,SAAUA,EACVtB,KAAM2E,EACNrE,UAAU,eACVG,SAAUwE,KAEThI,MAAMG,QAAQgI,GACXA,EAAQjF,KAAI,SAACmF,GACX,OAAO,4BAAQ/E,MAAO+E,GAASA,MAEjC,MAEN,2BAAO3D,IAAI,aAAarB,UAAU,0BAC/B+E,IA+ET,OA7KAE,qBACE,WACE9B,EAAWU,EAAkB1E,MAE/B,CAACA,IA0KD,yBAAKiC,MAAM,yBACT,yBAAKpB,UAAU,yBACb,wBAAIA,UAAU,cAxBpB,WACE,IAAIkF,EAAQ,KAEZ,OAAQnC,GACN,IA/UY,YAgVVmC,EAAK,kBAAc/F,EAAUjC,YAAxB,cACL,MACF,IAjVc,cAkVZgI,EAAK,kBAAc/F,EAAUjC,YAAxB,gBACL,MACF,IAtVc,cAuVZgI,EAAQ,wBACR,MACF,IAtVe,eAuVbA,EAAQ,mBAIZ,OAAOA,EAMyBC,KAE9B,yBAAK/D,MAAM,YAtWG,gBAuWX2B,EACG,KACAqB,EACE,cACA,eACA,KACA,qBACA,0HACA,OACA,MAELA,EACC,OACA,WACA,gCACA,wBACA,+CACA,OACA,MAEDQ,EAAY,WAAY,qBAAsB,CAAC,OAAQ,SAAU,MAGhED,IAAsB,KACpB,kBAAC5C,EAAD,CAAe5C,UAAWA,EAAWC,QAASA,IAGlD,kBAACoC,EAAD,CACErC,UAAWA,EACXC,QAASA,EACTF,SAAUyF,MAGXP,EACC,OACA,0BACA,OACA,oBACA,gGACA,SACA,GAEDA,EACC,QACA,0BACA,KACA,yBACA,kHACA,SACA,GAEDA,EACC,gBACA,8BACA,KACA,2BACA,kHACA,SACA,GAEDA,EACC,iBACA,eACA,KACA,2BACA,+EACA,SACA,GAGDQ,EACC,YACA,+CACA,CAAC,QAAS,QACV,uBAGJ,yBAAK5E,UAAU,YACY,UAAxBb,EAAU1B,UACP,KACA,CACE,yBAAK2D,MAAM,6CACT,wBAAIpB,UAAU,0BAAd,cAEFoE,EACE,WACA,gBACA,gCACA,uBACA,mDACA,OACA,MAEFA,EACE,WACA,oBACA,iCACA,kBACA,4DACA,OACA,MAEFA,EACE,WACA,0BACA,OACA,oBACA,sFACA,SACA,GAEFQ,EACE,aACA,iBACA,CAAC,MAAO,MAAO,OAAQ,UACvB,wBAGFD,IAAsB,KACpB,kBAAC,EAAD,CACEvF,QAASA,EACTH,aAAc,cACdE,UAAWA,IAGf,kBAAC,EAAD,CACEF,aAAc,cACdE,UAAWA,EACXC,QAASA,EACTF,SAAUyF,QAreL,iBA0edxF,EAnNL,WAEE,IAAIiG,EAAU,KACVC,EACF,2BAAOhE,IAAI,gBAAgBrB,UAAU,8BAArC,mEAIEsF,EACF,2BAAOjE,IAAI,gBAAgBrB,UAAU,+BAArC,qBAKF,QACoB3F,IAAlBgJ,GACyB,kBAAlBA,GACW,OAAlBA,EACA,CACA,IAAIkC,EAtRV,SAAsBpG,GACpB,IAAIqG,EAAoBvI,EAAqBkC,GAEzCsG,EACyB,SAA3BtG,EAAS,WAA2BlB,EAAkBkB,GAIxD,OAHAuG,QAAQC,IACN,sFAEKF,GAAkBD,EA8QLI,CAAazG,GAC7BiG,EACE,yBAAKpF,UAAU,6BACZuF,EACC,uCACEjE,GAAG,cACHvB,KAAK,SACLE,MAAOoD,EAAcpD,MACrBD,UAAWqD,EAAcrD,UAAY,mBAErCE,QAAS,kBAAMmD,EAAcC,aAAanE,EAAUjC,eANtD,KAOK,kBAGL,2BACEoE,GAAG,cACHvB,KAAK,SACLE,MAAM,gBACND,UAAW,6BAEXG,UAAU,IAGboF,EAAYD,EAAcD,GAKjC,OAAOD,EAoKyBS,GAAoB,MC1exD,SAASC,EAAY9G,GACnB,IAAItD,EAASpB,EAAS0E,EAAMtD,QAAUsD,EAAMtD,OArC5B,MAsCZqK,EAAiB,eAErB,OAAQrK,GACN,KAAK,IACL,KAAK,IACH,MACF,KAAK,IACHqK,EAAiB,cACjB,MACF,KAAK,IACHA,EAAiB,eACjB,MACF,QACEA,EAAiB,eAGrB,OACE,yBAAK/F,UAAU,YACb,4BAAK1F,EAAS0E,EAAMkG,OAASlG,EAAMkG,MAAQ,mBAC3C,yBAAKlF,UAAU,UACZ,IADH,gBAEe,0BAAMA,UAAW+F,IAAwB,IACrDzL,EAASoB,GAAUA,EA5DV,OA8DZ,yBAAKsE,UAAU,UACb,6CACA,4BACE,wBAAIA,UAAU,gBAAd,OACO,IACJhB,EAAMgH,aAAehH,EAAMgH,aAAe,wBAE7C,wBAAIhG,UAAU,gBAAd,OACO,IACJ1F,EAAS0E,EAAMiH,cACZjH,EAAMiH,aACN,yCAEN,wBAAIjG,UAAU,eAAd,OACO,IACJ1F,EAAS0E,EAAMkH,cACZlH,EAAMkH,aACN,0DAEN,wBAAIlG,UAAU,gBAAd,OACO,IACJ1F,EAAS0E,EAAMmH,cACZnH,EAAMmH,aACN,6CAEN,wBAAInG,UAAU,gBAAd,0DAC0D,QCtCrDoG,MAlDf,SAAoBpH,GAAQ,IAAD,EACE0B,mBAMlB,CACLvD,KAAM,GACN2G,SAAU,OACV5G,YAAa,GACbN,SAAU,GACVQ,KAAM,EACN7D,OAAQ,MACRiC,QAAS,GACT+B,MAAO,EACPF,cAAe,IACfC,eAAgB,EAChBG,UAAW,OACXU,SAAU,GACVC,SAAU,EACVC,WAAY,OACZH,SAAU,GACVI,YAAa,GACbC,SAAU,KAxBW,mBACpBY,EADoB,KACTC,EADS,OAEOsB,oBAAS,GAFhB,mBAEpBuC,EAFoB,KAETC,EAFS,OAGCxC,mBAAS,OAHV,mBAGpBhF,EAHoB,KAGZsH,EAHY,KAgCzB,OAJAiC,qBAAU,WACR7F,EAtBO,CACLjC,KAAM,GACN2G,SAAU,OACV5G,YAAa,GACbN,SAAU,GACVQ,KAAM,EACN7D,OAAQ,MACRiC,QAAS,GACT+B,MAAO,EACPF,cAAe,IACfC,eAAgB,EAChBG,UAAW,OACXU,SAAU,GACVC,SAAU,EACVC,WAAY,OACZH,SAAU,GACVI,YAAa,GACbC,SAAU,OAMX,CAAC0E,IAGF,kBAAC,IAAMoD,SAAP,KACE,yBAAKrG,UAAU,aACb,kBAAC8F,EAAD,CAAapK,OAAQA,KAEvB,kBAACqI,EAAD,CACEhB,SFLY,cEMZ3D,QAASA,EACTD,UAAWA,EACX8D,UAAWA,EACXC,aAAcA,EACdxH,OAAQA,EACRsH,UAAWA,MCDJsD,MA5Cf,SAAatH,GACX,OACE,yBACEgB,UAAU,8DACVI,MAAO,CACLmG,WACE,wEAGJ,uBAAGvG,UAAU,sBAAb,aACA,4BACEA,UAAU,iBACVD,KAAK,SACLyG,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM5G,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BsB,GAAG,aAC3C,wBAAItB,UAAU,sBACZ,kBAAC,IAAD,CAAM6G,GAAG,YAAY7G,UAAU,YAC7B,uBAAGA,UAAU,YAAb,cAEF,kBAAC,IAAD,CAAM6G,GAAG,SAAS7G,UAAU,YAC1B,uBAAGA,UAAU,YAAb,iBAEF,kBAAC,IAAD,CAAM6G,GAAG,UAAU7G,UAAU,YAC3B,uBAAGA,UAAU,YAAb,yBAEF,kBAAC,IAAD,CAAM6G,GAAG,UAAU7G,UAAU,YAC3B,uBAAGA,UAAU,YAAb,iBAEF,kBAAC,IAAD,CAAM6G,GAAG,SAAS7G,UAAU,YAC1B,uBAAGA,UAAU,YAAb,oBCNZ,SAAS8G,EAAS9H,GAAQ,IAlBJ+H,EAkBG,EACoBrG,oBAAS,GAD7B,mBAClBsG,EADkB,KACE5D,EADF,OAEe1C,mBAAS,MAFxB,mBAElBuG,EAFkB,KAEJC,EAFI,KAGjBC,EAA4BnI,EAA5BmI,iBAAkBjC,EAAUlG,EAAVkG,MAHD,EAI6BxE,mBAAS,IAJtC,mBAIlB0G,EAJkB,KAIGC,EAJH,OAKe3G,mBAAS,MALxB,mBAKlB4G,EALkB,KAKJC,EALI,OAMY7G,mBAASyG,EAAiB,IANtC,mBAMlBK,EANkB,KAMDC,EANC,OAOG/G,mBAAS,OAPZ,mBAOlBhF,EAPkB,KAOVsH,EAPU,KAQvB,SAAS0E,K,2CACPC,GAAmBpE,MAAK,SAACC,GACvB,IAAIoE,ETrBV,SAA8BX,GAC5B,IAAIY,EAAM,KAMV,OAJIlL,MAAMG,QAAQmK,KAChBY,EAAMZ,EAAapH,KAAI,SAACiI,GAAD,OAAWA,EAAM5K,gBAGnC2K,ESccE,CAAqBvE,EAAK7J,MAC3CuN,EAAgBU,MAwBpB,SAAS5G,EAASvB,GAAI,IAAD,EACGA,EAAEE,OAAlBD,EADa,EACbA,KAAMO,EADO,EACPA,MAIZ,OAFAR,EAAEwE,iBAEMvE,GACN,IA9DW,UAgEL/D,EAAc,cAAesE,IAAoB,KAAVA,IACzCoH,EAAuBpH,GACzB,MACF,IAlES,SAmEPwH,EAAUxH,IA8GhB,OAjIAgF,oBAAUyC,EAAyB,IACnCzC,qBAAU,WACRyC,IACAL,EAAuB,MACtB,CAACL,IACJ/B,qBAlBA,WTCF,IAA0B+C,KSALZ,ETCZ/N,IAAM,CACXC,IAAK,eACLC,OAhDK,OAiDLC,eAAgB,kBAAM,GACtBG,KAAM,CAAEuD,YAAa8K,MSLiBzE,MACpC,SAACC,GACqB,MAAhBA,EAAK9H,OACP6L,EAAgB/D,EAAK7J,KAAKgK,SAE1B4D,EAAgB,SAGpB,SAAC7D,SAS+B,CAAC0D,IA6HnC,kBAAC,IAAMf,SAAP,KAnEF,WACE,IAAI4B,EAAehB,aAAwBiB,QAE3C,OACE,yBAAKlI,UAAU,+BACb,yBAAKA,UAAU,uBACb,4BAAKkF,IAEP,yBAAKlF,UAAU,YACb,yBAAKA,UAAU,8BACb,kBAAC,IAAMqG,SAAP,KACE,2BAAOhF,IAAI,SAASrB,UAAU,cAA9B,qBAGA,2BACEmI,KAAK,YACLlI,MAAOmH,EACPpH,UAAU,eACVN,KAlIC,SAmID8C,YAAY,oBACZxB,SAAUA,EACVb,SAEE8H,KAKN,8BAAU3G,GAAG,aAGThH,EAAS2M,GACLA,EAAapH,KAAI,SAAC3C,GAAD,OACf,4BAAQ+C,MAAO/C,GAAcA,MAE/B,OAKV,yBAAK8C,UAAU,8BACb,kBAAC,IAAMqG,SAAP,KACE,2BAAOhF,IAAI,YAAYrB,UAAU,cAAjC,kBAGA,4BACEC,MAAOuH,EACPlG,GAAG,gBACHtB,UAAU,eACVgB,SAAUA,EACVtB,KAjKD,SAkKCS,UAAW7F,EAAS6M,IAEnB7M,EAAS6M,GACNA,EAAiBtH,KAAI,SAACmF,GACpB,OAAO,4BAAQ/E,MAAO+E,GAASA,MAEjC,UAWboD,GACD,yBAAKpI,UAAU,aAAf,IAA6B,kBAAC8F,EAAD,CAAapK,OAAQA,KACjDpB,EAASgN,GA3Gd,WACE,IAAIe,EAAU,KAKd,GAAqB,OAAjBf,EACF,OAAQE,GACN,IJxDY,cIoEZ,IJrEU,YIsERa,EACE,kBAACtE,EAAD,CACEhB,SAAUyE,EACVrI,UAAWmI,EACXlI,QAASmI,EACTnE,eAAgBA,EAChB1H,OAAQA,EACRsH,UAAWA,IAMrB,OAAOqF,EA0EDC,IApLYvB,EAqLCK,EAnLnB,yBAAKpH,UAAU,aACZ,IACD,yBAAKoB,MAAM,YACT,sDAC2B,IACxB9G,EAASyM,GACNA,EACA,0BAA2B,IAJjC,iFAMW,S,MCdnB,SAASwB,EAAavJ,GAAQ,IACtBwJ,EAAiExJ,EAAjEwJ,cAAeC,EAAkDzJ,EAAlDyJ,iBAAkBC,EAAgC1J,EAAhC0J,oBAAqBC,EAAW3J,EAAX2J,OADjC,EAEWjI,oBAAS,GAFpB,mBAEtBkI,EAFsB,KAERC,EAFQ,KAoB3B,OAhBAnD,QAAQC,IAAI,mBAAqB6C,GAiB/B,yBAAKxI,UAAU,0BACb,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,iBAAX,mCACA,2BACEC,GAAG,gBACHvB,KAAK,SACLiB,SAtBR,SAAkBvB,GAAI,IAAD,EACGA,EAAEE,OAAZM,GADO,EACbP,KADa,EACPO,OACR6I,EAAa7I,EAIb1F,EAAY0F,IAAU3F,EAASqO,IAAWrO,EAASqO,EAAO1I,IAC5D4I,GAAgB,IAEhBA,GAAgB,GAChBC,EAAa,GAGfL,EAAiBK,IAUXrG,IAAK,EACLC,IAAK8F,EAAgB,EACrBrI,SAA4B,IAAlBqI,EACVxI,UAAU,eACVC,MAAOyI,IAERE,EACC,0BAAM5I,UAAU,yBAAhB,+DAGE,KACe,IAAlBwI,EACC,0BAAMxI,UAAU,0BAAhB,0BACE,OAsRG+I,MAhRf,SAAgB/J,GAAQ,IAAD,EACyB0B,mBAAS,GADlC,mBAChBgI,EADgB,KACKD,EADL,OAGS/H,mBAAS,IAHlB,mBAGhBsI,EAHgB,KAGNC,EAHM,OAKiBvI,mBAAS,IAL1B,mBAKhBwI,EALgB,KAKFC,EALE,OAM6BzI,mBAAS,MANtC,mBAMhB0I,EANgB,KAMIC,EANJ,OAOkB3I,mBAAS,GAP3B,mBAOhB8H,EAPgB,KAODc,EAPC,KASfC,EAA6DvK,EAA7DuK,gBAAiBC,EAA4CxK,EAA5CwK,mBAAoBb,EAAwB3J,EAAxB2J,OAAQc,EAAgBzK,EAAhByK,IAAK/N,EAAWsD,EAAXtD,OAgGxD,SAASgO,EAAW1K,GAAQ,IACpBrF,EAAuBqF,EAAvBrF,KAAMgQ,EAAiB3K,EAAjB2K,aACRC,EACF,yBAAK5J,UAAU,UACZ,IACD,wBAAIA,UAAU,sBAAd,oBAIJ,GACE1F,EAASX,IACO,kBAATA,GACPW,EAASX,EAAK6B,UACdpB,EAAiBT,EAAK8B,MAEtB,GAAqB,YAAjBkO,EACFC,EACE,2BAAO5J,UAAU,sBA/DzB,YAAyC,IAAZxE,EAAW,EAAXA,QACvBqO,EAAmB3O,OAAOC,KAAKK,GAK/BsO,EAAe,GACfC,EAAa,KACbvN,EAAc,KACdwN,EAAmB,KAEvB,IARE1P,EAASkB,IAA+B,kBAAZA,EACxBN,OAAOC,KAAKK,GAASe,OACrB,GAMa,EAAG,CACpByN,EACE,+BACE,wBAAIxJ,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,kBAIJ,IAAK,IAAIlE,EAAI,EAAGA,EAAIuN,EAAiBtN,OAAQD,IAE3CE,EAAchB,EADduO,EAAaF,EAAiBvN,EAAI,KAElCwN,EAAaG,KACX,4BACE,4BAAKF,GACL,4BAAKvN,UAKXsN,EACE,4BACE,wBAAIhK,QAAQ,KAAZ,wDAMN,OACE,kBAAC,IAAMuG,SAAP,KACG2D,EACD,+BAAQF,IAuBHI,CAAkBvQ,SAGpB,GAAqB,SAAjBgQ,EAAyB,CAAC,IAC3BlO,EAAS9B,EAAT8B,KAEc,kBAATA,IACTA,EAAO0O,KAAKC,UAAU3O,EAAM,KAAM,QAEpCmO,EACE,2BAAO5J,UAAU,sBACf,+BACG,IACD,4BACE,wBAAIF,QAAQ,KAAZ,sBAGJ,+BACG,IACD,iCAAOrE,KAOjB,OAAOmO,EAIP,OAvIF3E,qBAAU,WACR,GAAI3K,EAASqO,IAA6B,kBAAXA,EAAqB,CAClD,IAAI0B,EAAQnP,OAAOC,KAAKwN,GAGxB,GAAI0B,EAAM9N,OAAS,EAAG,CACpB,IAAI2M,EAAemB,EAAM,GACrBtP,EAAa4N,EAAOO,GACpBoB,EAAapP,OAAOC,KAAKJ,GAAYwB,OAEzC0M,EAAYoB,GACZlB,EAAgBD,GAChBG,EAAsBV,EAAOO,IAC7BI,EAAgBgB,GAChB7B,EAAiB,OAGpB,CAACE,IAGJ1D,qBAAU,WAEN3K,EAAS4O,IACT5O,EAASqO,IACTrO,EAASqO,EAAOO,MAEhBT,EAAiB,GACjBY,EAAsBV,EAAOO,OAE9B,CAACA,IAEJjE,qBAAU,WACR,GACE3K,EAAS8O,IACqB,kBAAvBA,EACP,CACA,IAAIkB,EAAapP,OAAOC,KAAKiO,GAAoB7M,OACjD+M,EAAgBgB,MAEjB,CAAClB,KAgGM9O,EAAS8O,IAAuBZ,EAAgB,EACtD,kBAAC,IAAMnC,SAAP,KACE,yBAAKrG,UAAU,uBACb,wBAAIA,UAAU,gBACX,IADH,gIAKA,uBAAGA,UAAU,cAAb,YACYuJ,EADZ,IAC6B,6BAD7B,eAEeC,EAFf,IAEmC,6BACjC,6BAHF,oEAIoE,IAClE,6BALF,4CAM2C,6BACzC,0BAAMxJ,UAAU,eAAhB,IAAgCyJ,EAAhC,KACA,6BARF,2GAU2C,6BAV3C,6WAmBF,kBAAC3D,EAAD,CAAapK,OAAQA,KAGvB,kBAAC,IAAM2K,SAAP,KACE,yBAAKrG,UAAU,YACb,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,SAASrB,UAAU,gBAA9B,iBAGA,4BACEmI,KAAK,aACLlI,MAAOiJ,EACPlJ,UAAU,eACVN,KAAM,WACN8C,YAAY,oBACZxB,SAxLZ,SAAkBvB,GAAI,IACdQ,EAAUR,EAAEE,OAAZM,MAENkJ,EAAgBlJ,IAsLNqB,GAAG,WACHnB,UAEGxD,MAAMG,QAAQkM,IAAiC,IAApBA,EAASzM,QAKrCI,MAAMG,QAAQkM,IAAaA,EAASzM,OAAS,EACzCyM,EAASnJ,KAAI,SAAC7C,GAAD,OAAU,4BAAQiD,MAAOjD,GAAOA,MAC7C,QAKX1C,EAAS8O,IAAuBZ,EAAgB,EAC/C,kBAAC,IAAMnC,SAAP,KACE,kBAACkC,EAAD,CACEC,cAAeA,EACfC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,OAAQS,KAGV,KACJ,yBAAKpJ,UAAU,YACZwI,EAAgB,EACf,kBAAC,IAAMnC,SAAP,KACE,wBAAIrG,UAAU,UAAd,wBACwBwJ,EADxB,YACqDN,EAAc,KAEnE,2CACe,IACZE,EAAmBV,GAAqBnN,IAAIG,QAE/C,kBAACgO,EAAD,CACEC,aAAa,UACbhQ,KAAMyP,EAAmBV,GAAqBnN,MAEhD,kBAACmO,EAAD,CACEC,aAAa,OACbhQ,KAAMyP,EAAmBV,GAAqBnN,OAGhD,KAEHiN,EAAgB,EACf,kBAAC,IAAMnC,SAAP,KACE,wBAAIrG,UAAU,UAAd,uBACuBwJ,EADvB,YACoDN,GAGpD,kBAACQ,EAAD,CACEC,aAAa,OACbhQ,KAAMyP,EAAmBV,GAAqBpN,MAGhD,kBAACoO,EAAD,CACEC,aAAa,UACbhQ,KAAMyP,EAAmBV,GAAqBpN,OAIlD,wBAAI0E,UAAU,gBACX,IADH,8IAIgB,QCnT5B,SAASuK,EAAsBC,EAAcnG,GAC3C,IAAIwD,EAAM,GACN4C,EAAgB,KAEpB,GAAI9N,MAAMG,QAAQ0N,GAChB,IACE,IAAIE,EAAiB,EACrBA,EAAiBF,EAAajO,OAC9BmO,IAEmB,gBAAfrG,GAGFoG,EAAgBD,EAAaE,GAAb,YAChB7C,EAAIoC,KAAKQ,IAGLnQ,EADJmQ,EAAgBD,EAAaE,GAAgBrG,KAChBwD,EAAIoC,KAAKQ,GAK5C,OAAO5C,EAqCT,SAAS8C,EAA2BhC,GAClC,IAAIiC,EAAY1P,OAAOC,KAAKwN,GACxBkC,EAAc,KACdC,EAAqB,EACrBC,EAAa,KACbC,EAAc,GAElB,GAAIJ,EAAUrO,OAAS,EACrB,IAAK,IAAInB,EAAW,EAAGA,EAAWwP,EAAUrO,OAAQnB,IAAY,CAE9D0P,EAAqB,EACjBxQ,EAFJuQ,EAAclC,EAAOiC,EAAUxP,OAG7B0P,EAAqB5P,OAAOC,KAAK0P,GAAatO,QAEhD,IAAK,IAAI0O,EAAW,EAAGA,EAAWH,EAAoBG,IACpDF,EACEzQ,EAASuQ,EAAYI,GAAU1P,MAC/BjB,EAASuQ,EAAYI,GAAU1P,IAAIG,QAC/BmP,EAAYI,GAAU1P,IAAIG,OAC1B,KACFpB,EAASyQ,SAA2C1Q,IAA5B2Q,EAAYD,KACtCC,EAAYD,IAAc,GAIlC,OAAOC,EAyCT,SAASE,EAAmBC,EAAoBC,GAC9C,IAAIC,EAAiB,GAEnB/Q,EAAS6Q,IACqB,kBAAvBA,GACPjQ,OAAOC,KAAKgQ,GAAoB5O,OAAS,GAE1BrB,OAAOC,KAAKgQ,GAElBtL,KAAI,SAAC7C,GACZ,IAAIsO,EAAqBH,EAAmBnO,GAC5CqO,EAAerO,GAjDrB,SAA6BuO,EAAYH,GACvC,IAAII,EAAqB,GACrBC,EAAa,EACbC,EAAa,KACbC,EAAqB,EAEzB,GACErR,EAASiR,IACa,kBAAfA,GACPjR,EAAS8Q,IACgB,kBAAlBA,EACP,CACAO,EAAqBzQ,OAAOC,KAAKoQ,GAAYhP,OAE7C,IACE,IAAIqP,EAAgB,EACpBA,EAAgBD,EAChBC,IACA,CAGA,GACEtR,EAHFoR,EAAaH,EAAWK,KAItBtR,EAASoR,EAAWnQ,MACpBjB,EAASoR,EAAWnQ,IAAIG,SAIM,IAA1B0P,EAFSM,EAAWnQ,IAAIG,UAG1B8P,EAAmBC,EAAa,IAAMC,EACtCD,MAMR,OAAOD,EAaoBK,CACrBP,EACAF,MAKN,OAAOC,EAGT,SAASS,EAAWC,EAAYC,GAC9B,IAAIC,EAAe,KACfC,EAAS,KAEb,GACE5R,EAASyR,IACTzR,EAAS0R,IACTrP,MAAMG,QAAQkP,GAMd,IAJA,IAAIG,EAAiBH,EAAazP,OAC9BnB,EAAW,EACXgR,EAAgB,KAEbhR,EAAW+Q,GAAmC,OAAjBF,IAClCG,EAAgBJ,EAAa5Q,IAEZ,cAAoB2Q,IACnCE,EAAeG,GAEjBhR,IAMJ,OAFqB,OAAjB6Q,IAAuBC,EAASD,EAAaI,cAE1CH,EAGT,SAASI,EAAa9C,EAAoB+C,GACxC,IAAIL,EACF,yBAAKlM,UAAU,YACb,wBAAIA,UAAU,uBAAd,gBACA,2BACG,IADH,2HAqBJ,OAZE1F,EAASkP,IACTlP,EAASiS,IVzEb,SAAgCC,GAC9B,IAAIC,EACFnS,EAASkS,IACiB,kBAAnBA,GACPtR,OAAOC,KAAKqR,GAAgBjQ,OAAS,EAEvC,GAAIkQ,EAAc,CAChB,IAAIC,EAAWxR,OAAOC,KAAKqR,GACvBG,EAAWD,EAASnQ,OACpBqQ,EAAU,KAEd,GAAiB,IAAbD,EAAgBF,GAAe,OAEjC,IACE,IAAII,EAAY,EAChBA,EAAYF,GAAYF,EACxBI,KAGAJ,EAAe9Q,EApIN,WAmITiR,EAAUF,EAASG,OAIjBJ,EAAe3R,EAAmB0R,EAAeI,KAIzD,OAAOH,EUgDLK,CAAuBP,KAEvBL,EACE,kBAAC,EAAD,CACE1C,mBAAoBA,EACpBb,OAAQ4D,EACR7Q,OAAQ,gCAIPwQ,EAyQMa,MAvQf,SAAoB/N,GAAQ,IAAD,EACa0B,mBAAS,IADtB,mBACpBuG,EADoB,KACN+F,EADM,OAG0BtM,mBAAS,IAHnC,mBAGpBuM,EAHoB,KAGAC,EAHA,OAI6BxM,mBAAS,IAJtC,mBAIpByM,EAJoB,KAIEC,EAJF,OAM2B1M,mBAAS,IANpC,mBAMpBqG,EANoB,KAMCsG,EAND,OAO6B3M,mBAAS,IAPtC,mBAOpB8I,EAPoB,KAOA8D,EAPA,OASiB5M,mBAAS,MAT1B,mBASpB6M,EAToB,KASJC,EATI,OAUqC9M,mBAAS,MAV9C,mBAUpB6L,EAVoB,KAUIkB,EAVJ,OAYiB/M,mBAAS,IAZ1B,mBAYpBgN,EAZoB,KAYJC,EAZI,OAaCjN,mBAAS,MAbV,mBAapBhF,EAboB,KAaZsH,EAbY,KAcnB4K,EAAiBtB,EACrB9C,EACA+C,GAhBuB,GAmBqB7L,oBAAS,GAnB9B,qBAmBpBmN,GAnBoB,MAmBFC,GAnBE,MA4FzB,SAAS9M,GAASvB,GAAI,IAAD,EACGA,EAAEE,OAAlBD,EADa,EACbA,KAAMO,EADO,EACPA,MAGZ,IAF+B,KAAKpF,KAAKoF,GAGvC,OAAQP,GACN,IAAK,WACH,IAAIqO,EAAiBpS,EAAc,cAAesE,GAClDoN,EAAuBpN,GACvB6N,GAAoBC,GACpB,MACF,IAAK,SACHT,EAA0BrN,IAalC,SAAS+N,GAAqBvO,GAAI,IAAD,EACPA,EAAEE,OAApBD,EADyB,EACzBA,KAAMuO,EADmB,EACnBA,QACRC,EAAwB,eAAQR,GACpCQ,EAAyBxO,GAAQuO,EACjCN,EAAkBO,GAkCpB,OAtIAjJ,qBAAU,WAwGRrL,EAAU,oBAAwB2J,MAChC,SAAC4K,GACC,IAAIC,EAAwBD,EAASxU,KAErC,GACsB,MAApBwU,EAASzS,QAlTnB,SAA2B2S,GACzB,IAAIC,GAAa,EASjB,OARIlU,EAAiBiU,IACd1R,MAAMG,QAAQuR,KAInBC,GAAa,GAGRA,EAySCC,CAAkBH,GAClB,CACA,IAAInH,EAAesD,EACjB6D,EACA,eAIF,GAFApB,EAAgB/F,GAEZA,EAAa1K,OAAS,EAAG,CAC3B,IACIiS,EAAa7S,EAAc,eADbsL,EAAa,IAE/BoG,EAAuBpG,EAAa,IACpC6G,GAAoBU,SAGtBC,MAAM,+CAGV,SAAC/K,GACC+K,MAAM,qCA/HT,IAOHxJ,qBAAU,WACJ3K,EAASyM,IACXtN,EAAW,sBAAuB,CAChCyD,YAAa6J,IACZxD,MAAK,SAACC,GACP,GAAoB,MAAhBA,EAAK9H,OAAgB,CACvB,IAAIgT,EAAiBnE,EAAsB/G,EAAK7J,KAAM,WAEtD,GAAImD,kBAAQ4R,IAAmBA,EAAenS,OAAS,EAAG,CACxD,IAAIiQ,EAAiBhJ,EAAK7J,KACtBoS,EAAa2C,EAAe,GAC5BC,EAAuB7C,EAAWC,EAAYS,GAC9CoC,EAAuBjE,EACzBgE,GAEEpC,EAAyBrB,EAC3ByD,EACAC,GAEF1B,EAAuBwB,GACvBtB,EAAwBZ,GACxBc,EAA0BvB,GAC1ByB,EAAkBmB,EAAqB5C,IACvC4B,EAAkBiB,GAClBnB,EAA8BlB,SAGhCW,EAAuB,IACvBE,EAAwB,IACxBE,EAA0B,IAC1BE,EAAkB,MAClBG,EAAkB,MAClBF,EAA8B,MAEhCzK,EAAUQ,EAAK9H,aAElB,CAACqL,IAEJ9B,qBAAU,WACR,IAAI4J,EACFvU,EAAS6S,IACuB,kBAAzBA,GACPjS,OAAOC,KAAKgS,GAAsB5Q,OAAS,EAE7C,GAAIjC,EAASkP,IAAuBqF,EAAwB,CAC1D,IAAItB,EAAiBzB,EAAWtC,EAAoB2D,GAChD2B,EAAcnE,EAA2B4C,GACzCwB,EAAiB7D,EAAmBqC,EAAgBuB,GAExDtB,EAAkBD,GAClBI,EAAkBmB,GAClBrB,EAA8BsB,MAE/B,CAACvF,IAEJvE,qBAAU,WACR,IAAI8J,EAAiB7D,EAAmBqC,EAAgBG,GACxDD,EAA8BsB,KAC7B,CAACrB,IAoEF,yBAAK1N,UAAU,oBACb,yBAAKA,UAAU,2BACb,wDAEF,yBAAKA,UAAU,gDACb,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,SAASrB,UAAU,gBAA9B,gBAGA,2BACEmI,KAAK,eACLlI,MAAO8G,EACP/G,UAAU,eACVN,KAAM,WACN8C,YAAY,oBACZxB,SAAUA,GACVM,GAAG,WACHnB,UAEGxD,MAAMG,QAAQmK,IAAyC,IAAxBA,EAAa1K,SAGhDsR,GACC,0BAAM7N,UAAU,gBAAhB,8BAEA,0BAAMA,UAAU,gBAAhB,mCAKsB,IAAxBiH,EAAa1K,OACX,0BAAMyD,UAAU,yBAAhB,6DAIA,8BAAUsB,GAAG,gBAGT2F,EAAapH,KAAI,SAAC3C,GAAD,OACf,4BAAQ+C,MAAO/C,GAAcA,OAMvC,yBAAK8C,UAAU,8BACb,2BAAOqB,IAAI,aAAX,mBACA,4BACEpB,MAAOuJ,EACPlI,GAAG,gBACHtB,UAAU,eACVgB,SAAUA,GACVtB,KAAK,SACLS,UACGxD,MAAMG,QAAQqQ,IACiB,IAAhCA,EAAqB5Q,QAGtB0K,EAAa1K,OAAS,EACnB0Q,EAAmBpN,KAAI,SAACmF,GACtB,OAAO,4BAAQ/E,MAAO+E,GAASA,MAEjC,MAEJrI,MAAMG,QAAQqQ,IACc,IAA9BF,EAAmB1Q,OAIf,KAHF,0BAAMyD,UAAU,0BAAhB,6CAKJ,kBAAC8F,EAAD,CAAaZ,MAAO,gCAAiCxJ,OAAQA,IAC5DuR,EAAmB1Q,OAAS,GAC7BjC,EAASiS,IACTrR,OAAOC,KAAKoR,GAAwBhQ,OAAS,EAC3C,yBAAKyD,UAAU,qBACb,gEACA,8HAIA,kIAhZZ,SAAyCgP,GACvC,IAAIC,EAAc,GACdC,EAAqB,KAEzB,GAAI9U,EAAiB4U,IAAuC,kBAAhBA,EAK1C,IAHA,IAAIG,EAAajU,OAAOC,KAAK6T,GAGpB1S,EAAI,EAAGA,EAAI6S,EAAW5S,OAAQD,IACrC4S,EAAqBC,EAAW7S,IAEiB,IAA7C2S,EAAYG,QAAQF,IACtBD,EAAYhF,KAAKiF,GAKvB,OAAOD,EAkYII,CAAgC3B,GAAgB7N,KAAI,SAACnE,GAAD,OACnD,yBAAKsE,UAAU,cACb,2BACEN,KAAMhE,EACNqE,KAAK,WACLC,UAAU,mBACViO,QAASP,EAAehS,GACxBsF,SAAUgN,KAEZ,2BAAO3M,IAAK3F,EAAQsE,UAAU,oBAC3BtE,QAKP,MAELkS,IC9QQ0B,MA9Lf,SAAiBtQ,GAAQ,IAAD,EACI0B,mBAAS,OADb,mBACjBhF,EADiB,KACTsH,EADS,OAEgBtC,mBAAS,IAFzB,mBAEjBuG,EAFiB,KAEHsI,EAFG,OAG8B7O,mBAAS,IAHvC,mBAGjBqG,EAHiB,KAGIM,EAHJ,OAIgB3G,mBAAS,MAJzB,mBAIH6G,GAJG,aAKY7G,mBAAS,IALrB,mBAKjBqL,EALiB,KAKLyD,EALK,OAMsB9O,mBAC1C/E,EARe,cAQW,KAPN,mBAMjB8T,EANiB,KAMAC,EANA,KAShBC,GACHhT,MAAMG,QAAQmK,IAAyC,IAAxBA,EAAa1K,OAkB/C,SAASyE,EAAT,GAA4D,IAA9BtB,EAA6B,EAAvCC,OAAUD,KAAkBO,EAAW,EAArBN,OAAUM,MAC9C,OAAQP,GACN,IAAK,SACC/D,EAjCQ,cAiCmBsE,IAAQoH,EAAuBpH,GAC9D,MACF,IAAK,OACH,IAAIwP,EAAkB9T,EAnCX,cAmCqCsE,IAC5CwP,GAA6B,KAAVxP,IAAcuP,EAAcvP,GAC/CwP,GX0LZ,SACEG,EACAC,EACAC,GAEA,IAAIC,EAAiB,KAErB,OAAQH,GACN,IAAK,cACHG,EAAiBtW,EAAW,qBAAsB,CAChDyD,YAAa2S,IAEf,MACF,IAAK,cACHE,EAAiBtW,EAAW,oBAAqB,CAC/CuW,YAAaF,EACb5S,YAAa2S,IAKnB,OAAOE,EW9MCE,CACE,cACAlJ,EACA9G,GACAsD,MAAK,SAACC,GACU,MAAhBA,EAAK9H,OACDgU,GAAmB,GACnBA,GAAmB,MAG3BA,EAAmBD,IA0EzB,OArEAxK,qBAAU,WACRrL,EAAU,oBAAoB2J,MAAK,SAACC,GAClC,GAAoB,MAAhBA,EAAK9H,OAAgB,CACvB,IAAIwU,EAtCV,SAA6B/B,GAC3B,IAAIjC,EAAS,GAQb,OANI5R,EAAS6T,IAAaxR,MAAMG,QAAQqR,EAASxU,QAI/CuS,EAHeiC,EAATxU,KAGQkG,KAAI,SAACwO,GAAD,OAASA,EAAInR,gBAE1BgP,EA6ByBiE,CAAoB3M,GAChD+L,EAAgBW,QAEhBX,EAAgB,SAGnB,IAEHtK,qBAAU,WACJ3K,EAASyM,IACXtN,EAAW,eAAgB,CACzByD,YAAa6J,IACZxD,MAAK,SAACC,GACP,GAAoB,MAAhBA,EAAK9H,OAAgB,CACvB,IAAIiI,EAAUH,EAAK7J,KAEfW,EAASqJ,IX6PvB,SAAyBA,GACvB,IAAIyM,EAAY9V,EAASqJ,GACrB0M,EAAgBpT,EAAqB0G,GACrC8B,EAAiBxH,EAAkB0F,GAEvC,OAAOyM,GAAaC,GAAiB5K,EWlQJ6K,CAAgB3M,IACvC4D,EAAgB5D,SAIvB,CAACoD,IAEJ9B,qBAAU,WACJtI,MAAMG,QAAQmK,IAAiBA,EAAa1K,OAAS,GACvD8K,EAAuBJ,EAAa,MACrC,CAACA,IAEJhC,qBAAU,WACRuK,EAAc,MACb,CAACzI,IAqCF,yBAAK/G,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,UAAX,gBACA,4BACE3B,KAAK,SACL4B,GAAG,SACHN,SAAUA,EACVhB,UAAU,eACVC,MAAO8G,EACP5G,SAAUwP,GA5CS1I,EAAa1K,OAAS,EAG/C0K,EAAapH,KAAI,SAAC3C,GAAD,OACf,4BAAQ+C,MAAO/C,GAAcA,MAG/B,4BAAQ+C,MAAO,MAAf,yBAyCK0P,EACC,0BAAM3P,UAAU,yBAAhB,oDAGE,MAEN,yBAAKA,UAAU,8BACb,2BAAOqB,IAAI,QAAX,eACA,2BACEtB,KAAK,OACLL,KAAK,OACLM,UAAU,eACVC,MAAO8L,EACP/K,SAAUA,EACVb,SAAUwP,IAEXA,EACC,0BAAM3P,UAAU,yBAAhB,oDAGE,KACHyP,EACC,0BAAMzP,UAAU,0BAAhB,qBAEA,0BAAMA,UAAU,yBAAhB,8IAGe,MAInB,yBAAKA,UAAU,uBACb,2BAAOqB,IAAI,kBAAkBrB,UAAU,cAAvC,QAGA,2BACEsB,GAAG,kBACHvB,KAAK,SACLC,UAAU,+BACVE,QAAS,WA1EfvD,MAAMG,QAAQmK,IACdA,EAAa1K,QAAU,GACvBkT,GAOAhW,EAAW,eALO,CAChByD,YAAa6J,EACbiJ,YAAajE,IAGyBxI,MACtC,SAACC,GAAU,IACH9H,EAAW8H,EAAK9H,OAAhBA,OACNsH,EAAUtH,GAEK,MAAXA,GAAgB8T,EAAc,OAEpC,SAAC9L,GAAD,OAASV,EAAU,WA2Df/C,MAAM,gBAEP0P,EACC,0BAAM3P,UAAU,yBAAhB,2CAGE,OAGR,kBAAC8F,EAAD,CAAapK,OAAQA,M,6JC0OZ6U,OAvaf,WACE,OACE,yBAAKvQ,UAAU,aACb,yBAAKA,UAAU,YACb,gDACA,skCAmBF,yBAAKA,UAAU,YACb,2CACA,kbAOE,2BAAOA,UAAU,SACf,+BACE,qCACA,sCACA,gDACA,8CAEF,+BACE,4BACE,sCACA,oCACA,+DACA,iDAEF,4BACE,+CACA,oCACA,+DACA,iDAEF,4BACE,yCACA,mCACA,+DACA,4BAAK,oDAKb,8ZAOE,6BACA,yBAAKwQ,IAAKC,MACV,6BATF,2wBAsBE,6BACGtG,KAAKC,UACJ,CACEsG,EAAG,CAAEnX,OAAQ,OAAQyD,KAAM,UAC3B2T,EAAG,CAAEpX,OAAQ,OAAQyD,KAAM,mBAC3B4T,EAAG,CAAErX,OAAQ,MAAOyD,KAAM,cAE5B,KACA,IA9BN,uSAsCE,4BACE,oEACA,6EACA,wEAzCJ,wQAgDA,kMAIE,yBAAKwT,IAAKK,OACV,6BALF,mcAeA,2BACE,wBAAI7Q,UAAU,uBAAd,oBACA,2BACG,IADH,mGAKA,2BAAOA,UAAU,SACf,+BACE,4BACE,wBAAIQ,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,gBAGJ,+BACE,4BACE,2CACA,0EAEF,4BACE,wCACA,gFAEF,4BACE,0CACA,uGAMF,4BACE,4CACA,4EAEF,4BACE,8CACA,gOAOF,4BACE,oDACA,iHAKF,4BACE,uDACA,4FAKF,4BACE,mDACA,6MAMF,4BACE,2DACA,0FAIF,4BACE,+CACA,qFAEF,4BACE,yCACA,yTAYV,yBAAKR,UAAU,YACb,wBAAIA,UAAU,UAAd,gBACA,wnBAUE,6BACGmK,KAAKC,UACJ,CACE,CACE5O,QAAS,CACPsV,SAAU,IACVC,SAAU,KAEZtV,KAAM,+BAER,CACED,QAAS,CACPsV,SAAU,IACVC,SAAU,KAEZtV,KAAM,gCAGV,KACA,IA7BN,ubAuCE,0cAWJ,yBAAKuE,UAAU,YACb,wDACA,0WAME,6BACA,yBAAKwQ,IAAK/S,OACV,2BAAOuC,UAAU,SACf,+BACE,4BACE,wBAAIQ,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,gBAGJ,+BACE,4BACE,6CACA,+EAEF,4BACE,kDACA,kFAGF,4BACE,uDACA,yFAKF,4BACE,8CACA,mGAKF,4BACE,2CACA,4HAKF,4BACE,4CACA,kJAKF,4BACE,yCACA,yTAYV,yBAAKR,UAAU,YACb,gDACA,2BACG,IADH,6rBAaE,6BACA,yBAAKwQ,IAAKQ,SAGd,yBAAKhR,UAAU,YACb,+CACA,sOAIE,6BACA,yBAAKwQ,IAAKS,SAGd,yBAAKjR,UAAU,YACb,2DACA,2BACG,IADH,ogBAUE,6BACC,yBAAKwQ,IAAKU,QAEb,0CACA,2BACG,IADH,kgCAgBgE,IAC9D,6BACA,6BACA,6BACA,6BACA,yBAAKV,IAAK7H,SAGd,yBAAK3I,UAAU,YACb,iDACA,+bAOE,6BAPF,IAOY,6BACV,6BARF,IAQY,6BACV,yBAAKwQ,IAAKW,WC9ZhBC,GAAY,yBAAKhR,MAAO,CAAE,aAAc,WAqC7BiR,OA/Bf,WACE,OACE,yBAAKrR,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACCoR,GACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,OAAK,EAACtU,KAAK,cAChB,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOsU,OAAK,EAACtU,KAAK,YAChB,kBAAC8J,EAAD,CACEK,iBAAkB,CAhBd,YACE,eAgBNjC,MAAM,kDAGV,kBAAC,IAAD,CAAOoM,OAAK,EAACtU,KAAK,WAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOsU,OAAK,EAACtU,KAAK,YAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOsU,OAAK,EAACtU,KAAK,WAChB,kBAAC,EAAD,WC5BQuU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5O,MAAK,SAAA6O,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7M,QAAQ6M,MAAMA,EAAMC,c","file":"static/js/main.77a93524.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hostpathtutorial.6b5ca750.png\";","module.exports = __webpack_public_path__ + \"static/media/reqspersecforks.b380f016.png\";","module.exports = __webpack_public_path__ + \"static/media/datafetch.eab7d1db.png\";","module.exports = __webpack_public_path__ + \"static/media/editdelete.3d364aff.png\";","module.exports = __webpack_public_path__ + \"static/media/selectreport.461bccef.png\";","module.exports = __webpack_public_path__ + \"static/media/checkbox.33c63f23.png\";","module.exports = __webpack_public_path__ + \"static/media/report.35ab47cc.png\";","module.exports = __webpack_public_path__ + \"static/media/runreport.764c467d.png\";","import axios from \"axios\";\nconst get = \"get\",\n  put = \"put\",\n  post = \"post\",\n  delete_ = \"delete\";\n\n// /gettestset route is used to pull all information regarding for testsets.\n// type tells us what we need.\n//type info below\n// testsetnames = a list of all testsets.\n//testset = test set form\n// report = report for a specified testsetname\n\nasync function get_testsetnames() {\n  return axios({\n    url: \"/gettestsetnames\",\n    method: get,\n    validateStatus: () => true,\n  });\n}\n\nfunction process_testsetnames(testsetnames) {\n  let ret = null;\n\n  if (Array.isArray(testsetnames)) {\n    ret = testsetnames.map((dbObj) => dbObj.testsetname);\n  }\n\n  return ret;\n}\n\nfunction post_axios(url, postobj) {\n  return axios({\n    url: url,\n    method: post,\n    data: postobj,\n    validateStatus: () => true,\n  });\n}\n\nfunction get_axios(url) {\n  return axios({\n    url: url,\n    method: get,\n    validateStatus: () => true,\n  });\n}\n\nfunction post_testsetname(testsetname_string) {\n  return axios({\n    url: \"/posttestset\",\n    method: post,\n    validateStatus: () => true,\n    data: { testsetname: testsetname_string },\n  });\n}\n\nfunction post_edittestset(testset) {\n  return axios({\n    url: \"/edittestset\",\n    method: post,\n    data: testset,\n    validateStatus: () => true,\n  });\n}\n\nexport {\n  get_testsetnames,\n  process_testsetnames,\n  post_testsetname,\n  post_edittestset,\n  post_axios,\n  get_axios,\n};\n","//method literals to be used in this file. One a dictionary for checking.\n\nimport { post_axios } from \"../Axios/axiosroutes\";\n\n//the other individual listings of various expected process arguments.\nconst methods = { get: \"get\", put: \"put\", post: \"post\", delete: \"delete\" };\n\nconst host = \"host\";\nconst port = \"port\";\nconst method = \"method\";\nconst pathlist = \"pathlist\";\nconst reqspersecond = \"reqspersecond\";\nconst forks = \"forks\";\nconst secondduration = \"secondduration\";\nconst datahost = \"datahost\";\nconst dataport = \"dataport\";\nconst datapath = \"datapath\";\nconst datamethod = \"datamethod\";\nconst datafetch = \"datafetch\";\nconst dataheaders = \"dataheaders\";\nconst databody = \"databody\";\nconst datasave = \"datasave\";\nconst reqspreview = \"reqspreview\";\nconst testsetname = \"testsetname\";\nconst report_name = \"report_name\";\nconst header = \"header\";\n\nconst bodyProperties = {\n  testsetname: \"testsetname\",\n  host: \"host\",\n  paths: \"paths\",\n  method: \"method\",\n  port: \"port\",\n  reqspersecond: \"reqspersecond\",\n  secondduration: \"secondduration\",\n  forks: \"forks\",\n  datafetch: \"datafetch\",\n  datapath: \"datapath\",\n  datahost: \"datahost\",\n  dataport: \"dataport\",\n  datamethod: \"datamethod\",\n  dataheaders: \"dataheaders\",\n  databody: \"databody\",\n  reqspreview: \"reqspreview\",\n  datasave: \"datasave\",\n};\n\nfunction notNullUndefinedString(property) {\n  return property !== \"undefined\" && property !== \"null\";\n}\n\nfunction notNullUndefined(property) {\n  return property !== null && property !== undefined;\n}\nfunction notFalsy(property) {\n  return (\n    notNullUndefined(property) &&\n    property !== \"\" &&\n    property !== 0 &&\n    notNullUndefinedString(property)\n  );\n}\n\nfunction numberCheck(number_value) {\n  let numConversion = Number(number_value);\n  let validNumber = typeof numConversion === \"number\";\n  let nanstring = /[^0-9]/gi; //test for characters other than digits in a string\n  let zero_padding_test = /0[0-9]+/gi;\n  let debug = zero_padding_test.test(number_value);\n\n  if (validNumber) {\n    validNumber =\n      numConversion % 1 === 0 &&\n      numConversion >= 1 &&\n      !nanstring.test(numConversion + \"\") &&\n      !zero_padding_test.test(number_value); // adding empty str to explicitly convert number to string.\n  }\n  return validNumber;\n}\n\nfunction validateHeaders(headersObject) {\n  let validHeaders = notFalsy(headersObject);\n  let keys = Object.keys(headersObject);\n  let i = 0;\n  let length = keys.length;\n  let headerValue = null;\n  let headerKey = null;\n\n  while (i < length && validHeaders) {\n    headerKey = keys[i];\n    headerValue = headersObject[headerKey];\n    validHeaders = notFalsy(headerKey) && notFalsy(headerValue);\n    i++;\n  }\n\n  return validHeaders;\n}\n\nfunction validatePathReport(pathReport) {\n  let validPathReport = notFalsy(pathReport) && typeof pathReport === \"object\";\n  let reqres_pair = null;\n  if (validatePathReport) {\n    let reportLenght = Object.keys(pathReport);\n    for (\n      let report_i = 0;\n      report_i < reportLenght && validPathReport;\n      report_i++\n    ) {\n      let reqres_pair = pathReport(report_i + \"\");\n      validPathReport = notFalsy(reqres_pair);\n      if (validPathReport) {\n        let { req, res } = reqres_pair;\n        if (notFalsy(req) && notFalsy(res)) {\n          if (\n            !notNullUndefined(req.headers) &&\n            !notNullUndefined(req.body) &&\n            !notNullUndefined(res.headers) &&\n            !notNullUndefined(res.body) &&\n            !notNullUndefined(res.status)\n          ) {\n            validPathReport = false;\n          }\n        } else validPathReport = false;\n      }\n    }\n  }\n\n  return validPathReport;\n}\nfunction validateTestSetReports(testsetReports) {\n  let validReports =\n    notFalsy(testsetReports) &&\n    typeof testsetReports === \"object\" &&\n    Object.keys(testsetReports).length > 0;\n\n  if (validReports) {\n    let pathKeys = Object.keys(testsetReports);\n    let path_len = pathKeys.length;\n    let pathKey = null;\n\n    if (path_len === 0) validReports = false;\n    else {\n      for (\n        let pathKey_i = 0;\n        pathKey_i < path_len && validReports;\n        pathKey_i++\n      ) {\n        pathKey = pathKeys[pathKey_i];\n        validReports = checkProperty(datapath, pathKey);\n\n        if (validReports)\n          validReports = validatePathReport(testsetReports[pathKey]);\n      }\n    }\n  }\n  return validReports;\n}\n//This function checks the values of the JSON arguments\n//used to specify the hostname, hostport, and etc\n// of the API endpoint which contains data that will be dispatched\n//alongside every dispatched request.\n\nfunction checkProperty(prop, prop_value) {\n  // validProps is the return value which indicates if dataprops are valid or not.\n  let validProps = true;\n  let whitespace_found = /\\\\s/gi;\n  let forwardslash_consecutive = /\\/\\/+/;\n\n  validProps =\n    notNullUndefined(prop_value) && notNullUndefinedString(prop_value);\n\n  if (validProps)\n    switch (prop) {\n      case report_name:\n        validProps =\n          notFalsy(prop_value) &&\n          !/[^a-z0123456789.]/gi.test(prop_value) && //not undef\n          typeof prop_value === \"string\"; //and is correct type\n        break;\n      case testsetname:\n      case datahost:\n      case host:\n        validProps =\n          notFalsy(prop_value) && //not empty str undefined null\n          !/[^a-z0123456789.]/gi.test(prop_value) && //not undef\n          !whitespace_found.test(prop_value) && // no whitespace fund\n          typeof prop_value === \"string\"; //and is correct type\n        break;\n      case datamethod:\n        validProps = methods[prop_value] !== undefined;\n        break;\n      case datafetch:\n        validProps = prop_value === \"true\" || prop_value === \"false\";\n        break;\n      case port:\n      case dataport:\n      case forks:\n      case reqspersecond:\n      case secondduration:\n        validProps = numberCheck(prop_value);\n        break;\n      case method:\n        validProps = notFalsy(prop_value) && notFalsy(methods[prop_value]);\n        break;\n      case pathlist:\n        validProps = validatePaths(prop_value);\n        break;\n      case datapath:\n        let multipleForwardSlash = !forwardslash_consecutive.test(prop_value);\n        let forwardSlash = /^\\//.test(prop_value);\n        let invalidCharFound = /[^a-z0-9-._~:\\/?#\\[\\]@!$&'()*+,;=]/gi.test(\n          prop_value\n        );\n        validProps =\n          prop_value === \"\" ||\n          (forwardSlash && !invalidCharFound && multipleForwardSlash);\n        break;\n      case dataheaders:\n        validProps = validateHeaders(prop_value);\n        break;\n      case databody:\n        validProps =\n          notNullUndefined(prop_value) && typeof prop_value === \"string\";\n        break;\n      case reqspreview:\n        validProps = prop_value instanceof Array;\n        break;\n      case header:\n        validProps = notFalsy(prop_value) && !whitespace_found.test(prop_value);\n        break;\n    }\n\n  return validProps;\n}\n\nfunction checkServerForExistance(\n  prop_name,\n  testsetname_value,\n  report_name_value\n) {\n  let validPropAsync = null;\n  //if sync check passes\n  switch (prop_name) {\n    case \"testsetname\":\n      validPropAsync = post_axios(\"/existstestsetname\", {\n        testsetname: testsetname_value,\n      });\n      break;\n    case \"report_name\":\n      validPropAsync = post_axios(\"/existsreportname\", {\n        report_name: report_name_value,\n        testsetname: testsetname_value,\n      });\n      break;\n  }\n\n  return validPropAsync;\n}\nfunction validatePaths(pathlist) {\n  let valid_paths = Array.isArray(pathlist);\n  let selectedPathObject = null;\n\n  if (valid_paths) {\n    let length = pathlist.length;\n\n    for (let i = 0; i < length && valid_paths; i++) {\n      selectedPathObject = pathlist[i];\n      valid_paths =\n        notFalsy(selectedPathObject) &&\n        notNullUndefinedString(selectedPathObject) &&\n        checkProperty(\"datapath\", pathlist[i].path);\n    }\n  }\n  return valid_paths;\n}\n\nfunction validateRequestProps({\n  testsetname,\n  host,\n  method,\n  pathlist,\n  port,\n  reqspersecond,\n  secondduration,\n  forks,\n  datafetch,\n}) {\n  //these let statements are used for code clarity/debugging\n  let testsetname_test = checkProperty(\"testsetname\", testsetname);\n  let host_test = checkProperty(\"host\", host);\n  let method_test = checkProperty(\"method\", method);\n  let pathlist_test = validatePaths(pathlist);\n  let port_test = checkProperty(\"port\", port);\n  let reqspersecond_test = checkProperty(\"reqspersecond\", reqspersecond);\n  let secondduration_test = checkProperty(\"secondduration\", secondduration);\n  let forks_test = checkProperty(\"forks\", forks);\n\n  return (\n    testsetname_test &&\n    host_test &&\n    method_test &&\n    pathlist_test &&\n    port_test &&\n    reqspersecond_test &&\n    secondduration_test &&\n    forks_test\n  );\n}\n\nfunction validateDataProps({\n  datafetch,\n  datapath,\n  datahost,\n  dataport,\n  datamethod,\n  dataheaders,\n  databody,\n}) {\n  let datafetch_test = checkProperty(\"datafetch\", datafetch);\n  let datapath_test = checkProperty(\"datapath\", datapath);\n  let datahost_test = checkProperty(\"datahost\", datahost);\n  let dataport_test = checkProperty(\"dataport\", dataport);\n  let datamethod_test = checkProperty(\"datamethod\", datamethod);\n  let dataheaders_test = checkProperty(\"dataheaders\", dataheaders);\n  let databody_test = checkProperty(\"databody\", databody);\n\n  return (\n    datafetch_test &&\n    datapath_test &&\n    datahost_test &&\n    dataport_test &&\n    datamethod_test &&\n    dataheaders_test &&\n    databody_test\n  );\n}\n\nfunction validateTestSet(testset) {\n  let notFalsie = notFalsy(testset);\n  let validReqProps = validateRequestProps(testset);\n  let validDataProps = validateDataProps(testset);\n\n  return notFalsie && validReqProps && validDataProps;\n}\n\nfunction buildProcessJsonString(formState) {\n  let process_json = { ...formState };\n  //This funciton stringifies formState and converts datafetch from string to bool\n  let { datafetch } = process_json;\n  datafetch = datafetch === \"true\" ? true : false;\n\n  if (!datafetch) {\n    process_json.datahost = undefined;\n    process_json.dataport = undefined;\n    process_json.datamethod = undefined;\n    process_json.dataport = undefined;\n    process_json.dataheaders = undefined;\n  }\n  return JSON.stringify(process_json);\n}\n\nfunction validateMethod(method) {\n  return (\n    method === \"get\" ||\n    method === \"put\" ||\n    method === \"post\" ||\n    method === \"delete\"\n  );\n}\n\nfunction validateReportObject(report) {\n  let validReportObj = notNullUndefined(report) && typeof report === \"object\";\n\n  if (validReportObj) {\n    let reportIndices = Object.keys(report);\n    let reportIndex = null;\n    let reqres_pair = null;\n    validReportObj = reportIndices.length > 0;\n\n    if (validReportObj) {\n      for (let i = 0; i < reportIndices.length && validReportObj; i++) {\n        reportIndex = reportIndices[i];\n        reqres_pair = report[reportIndex];\n\n        let { req, res } = notFalsy(reqres_pair)\n          ? reqres_pair\n          : { req: undefined, res: undefined };\n\n        if (\n          !notFalsy(req) ||\n          !notFalsy(res) ||\n          !notFalsy(req.body) ||\n          !notFalsy(req.headers) ||\n          !notFalsy(res.body) ||\n          !notFalsy(res.headers)\n        ) {\n          validReportObj = false;\n        }\n      }\n    }\n\n    return validReportObj;\n  }\n}\n\nexport {\n  notNullUndefined,\n  checkProperty,\n  validateRequestProps,\n  validateDataProps,\n  notFalsy,\n  buildProcessJsonString,\n  validateMethod,\n  validateTestSet,\n  validateReportObject,\n  numberCheck,\n  checkServerForExistance,\n  validateTestSetReports,\n};\n","import React, { useState } from \"react\";\nimport { notFalsy, notNullUndefined } from \"../../Validator/Validator\";\n//This function builds a table display the list of added headers, their values and an option to remove\n//said header\nfunction HeadersList(props) {\n  let { headers_name, readonly, formState, setForm } = props; //headers_name identifies the type of headers to list (dataheaders or requestheadrs)\n  let table_contents = <tr>No headers added.</tr>; //table_contentsd is inserted into the table.\n  let header_keys = null; //keys.\n  let header_length = -1; //header length.\n  let headers = formState[headers_name];\n  //This function removes a header from the header list on the click of a button assigned the headrs name.\n  function removeHeader(e) {\n    let { name } = e.target; //button name set to header name\n    let formStateCopy = { ...formState }; // new form object ot replace old.\n    //if header names and value\n    if (\n      notNullUndefined(name) &&\n      notNullUndefined(formState[headers_name][name]) //if header name nt null undefined and is an exisitng header\n    ) {\n      delete formStateCopy[headers_name][name]; // delete the old header property\n      setForm(formStateCopy); //update form state with header removed\n    }\n  }\n  //if headers are not null/undefined\n  if (notFalsy(headers)) {\n    header_keys = Object.keys(formState[headers_name]); //update keys and length objects for use below.\n    header_length = header_keys.length;\n  }\n\n  //if header keys contain one or more element\n  if (header_length > 0) {\n    //map them to the table.\n    table_contents = header_keys.map((headerKey) => (\n      <tr>\n        <td colSpan=\"1\">{headerKey}</td>\n        <td colSpan=\"1\">{headers[headerKey]}</td>\n        <td colSpan=\"1\">\n          <input\n            name={headerKey}\n            colSpan=\"1\"\n            type=\"button\"\n            className={readonly ? \"btn btn-secondary\" : \"btn btn-success\"}\n            value={readonly ? \"\" : \"Remove-Header\"}\n            onClick={removeHeader}\n            disabled={readonly}\n          />\n        </td>\n      </tr>\n    ));\n  } else {\n    table_contents = (\n      <tr>\n        <td colSpan=\"3\" className=\"text-center text-warning\">\n          No HTTP headers added.\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <div\n      className=\"col-12\"\n      style={{ color: \"white\", height: \"300px\", overflow: \"auto\" }}\n    >\n      <h2 className=\"col-12 text-left\">\n        <span className=\"badge badge-success \">Added Headers</span>\n      </h2>\n      <table className=\"table bg-secondary text-white  \">\n        <thead>\n          <tr>\n            <th scope=\"col\">Header Name</th>\n            <th scope=\"col\">Header Value</th>\n            <th scope=\"col\"></th>\n          </tr>\n          {table_contents}\n        </thead>\n      </table>\n    </div>\n  );\n}\n\nexport default HeadersList;\n","import React, { useState } from \"react\";\nimport { notFalsy, checkProperty } from \"../../Validator/Validator\";\nimport HeadersList from \"./HeadersList\";\n\nfunction AddHeader(props) {\n  //headers = {header0:value0,...,headerN:valueN}\n  let { formState, setForm, headers_name } = props;\n  let [new_header, set_new_header] = useState({ name: \"\", value: \"\" });\n  let [headerWarnings, setHeaderWarnings] = useState({\n    name: true,\n    value: true,\n  });\n\n  const btnDisabled =\n    !checkProperty(\"header\", new_header.name) ||\n    !checkProperty(\"header\", new_header.value);\n  let [method, setMethod] = useState(\"get\");\n  function onChange(e) {\n    let { name, value } = e.target; //get input name and value of input\n    let new_header_copy = { ...new_header }; //copy headers\n    let warnings_copy = { ...headerWarnings }; //copy header wanrings\n    //let invalidHeader = /^$\"\\s[(),:;\\<=>?@/][\\{}]/g; //regex to sift out invalid chars\n    let invalidHeader = /[\\[\\]\\(\\)\\,\\:\\;\\<\\=\\>\\?@\\{\\}]/g;\n    if (name === \"name\") {\n      let emptyValue = value === \"\";\n      //only set value if its not an invalidHeader char or value is empty(user deleting input)\n      if (!invalidHeader.test(value) || emptyValue) {\n        new_header_copy[\"name\"] = value;\n        warnings_copy[\"name\"] = emptyValue;\n      } else {\n        warnings_copy[\"name\"] = true;\n      }\n    } else {\n      warnings_copy[\"value\"] = value === \"\";\n      new_header_copy[\"value\"] = value;\n    }\n    set_new_header(new_header_copy);\n    setHeaderWarnings(warnings_copy);\n  }\n  //This function adds an Http Header-Value pair to the form state object.\n  function addHeader(e) {\n    //Get header name,value value from header state.\n    let formStateCopy = { ...formState }; //copy formstate.\n    let { name, value } = new_header;\n    if (\n      checkProperty(\"header\", name) && //If new header name is not falsy, empty string in this case.\n      checkProperty(\"header\", value) && //if new value not falsy\n      formState[headers_name][name] === undefined // and that header name has not already been added.\n    ) {\n      formState[headers_name][name] = value; //set formstate copy headers object to the new object.\n      setForm(formStateCopy); // replace old formstate copy with new.\n      set_new_header({ name: \"\", value: \"\" });\n    }\n  }\n\n  return (\n    <div class=\"col-12 form-row\">\n      <div class=\"form-group col-12 col-md-4\">\n        <label for=\"header-name\">Header Name</label>\n        <input\n          name=\"name\"\n          type=\"text\"\n          className=\"form-control\"\n          value={new_header.name}\n          onChange={onChange}\n        />\n        {headerWarnings.name ? (\n          <span className=\"form-text text-warning\">\n            {'Bad Input/Value. Accepted Header Inputs: /^$\"s[(),:;<=>?@/][{}]/'}\n          </span>\n        ) : (\n          <span class=\"form-text text-success\">\n            Header name value is valid.\n          </span>\n        )}\n      </div>\n      <div className=\"form-group col-12 col-md-4\">\n        <label for=\"header-value\">Header Value</label>\n        <input\n          name=\"value\"\n          type=\"text\"\n          className=\"form-control\"\n          value={new_header.value}\n          onChange={onChange}\n        />\n        {headerWarnings.value ? (\n          <span className=\"form-text text-warning\">\n            {'Bad Input/Value. Accepted Header Inputs: /^$\"s[(),:;<=>?@/][{}]/'}\n          </span>\n        ) : (\n          <span class=\"form-text text-success\">\n            Header name value is valid.\n          </span>\n        )}\n      </div>\n\n      <div class=\"form-group col-12 col-md-4 \">\n        <label for=\"header-button\" className=\"text-white\">\n          Move along good sir or madam.\n        </label>\n        <input\n          type=\"button\"\n          className={\n            btnDisabled\n              ? \"btn btn-outline-warning my-auto form-control\"\n              : \"btn btn-outline-success my-auto form-control\"\n          }\n          value={btnDisabled ? \" Disabled\" : \"Add-Header-KV\"}\n          id=\"header-button\"\n          onClick={(e) => addHeader(e)}\n          disabled={btnDisabled}\n        />\n        {headerWarnings.value || headerWarnings.name ? (\n          <span className=\"form-text text-warning\">\n            Can't add header name-value pair. Check the inputs, correct the\n            mistake, and try again.\n          </span>\n        ) : (\n          <span class=\"form-text text-success\">\n            Header name-value pair valid.\n          </span>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default AddHeader;\n","import React, { useState } from \"react\";\nimport {\n  notNullUndefined,\n  validateMethod,\n  checkProperty,\n} from \"../../Validator/Validator\";\nimport { isArray } from \"jquery\";\n\nfunction PathList(props) {\n  let { formState, setForm, readonly } = props;\n  let pathIndex = 0;\n\n  let valid_pathlist =\n    notNullUndefined(formState.pathlist) &&\n    Array.isArray(formState.pathlist) &&\n    formState.pathlist.length >= 1;\n\n  function removePath(e) {\n    let { pathlist } = formState;\n    let index = Number(e.target.name);\n    let formStateCopy = { ...formState };\n\n    let validPathIndex =\n      Array.isArray(pathlist) &&\n      index >= 0 &&\n      index < pathlist.length &&\n      notNullUndefined(pathlist[index]);\n\n    if (validPathIndex) {\n      formStateCopy.pathlist.splice(index, 1);\n      setForm(formStateCopy);\n    }\n  }\n\n  let table_contents = valid_pathlist ? (\n    formState.pathlist.map((pathObject) => {\n      let { path, method } = pathObject;\n      let ret_row = (\n        <tr>\n          <td>{pathIndex}</td>\n          <td>{path}</td>\n          <td>{method}</td>\n          <td>\n            <input\n              type=\"button\"\n              className=\"btn btn-outline-success\"\n              name={pathIndex}\n              value=\"Remove Path\"\n              onClick={(e) => removePath(e)}\n              disabled={readonly}\n            />\n          </td>\n        </tr>\n      );\n      pathIndex++;\n\n      return ret_row;\n    })\n  ) : (\n    <tr>\n      <td colSpan=\"4\" className=\"text-warning\">\n        No pathnames added.\n      </td>\n    </tr>\n  );\n\n  return (\n    <div className=\"col-12\">\n      <div style={{ height: \"300px\", overflow: \"auto\" }}>\n        <table className=\"table bg-secondary text-white\">\n          <tr>\n            <th colSpan=\"1\">Dispatch Order</th>\n            <th colSpan=\"1\">Path</th>\n            <th colSpan=\"1\">HTTP Method</th>\n            <th colSpan=\"1\"></th>\n          </tr>\n          {table_contents}\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction AddPathToList(props) {\n  let { formState, setForm } = props; //get formstate and formstate setter\n  let { pathlist } = formState; //get pathlist from formState mainly for readabiltiuy and cohe clarity\n  let index = Array.isArray(pathlist) ? pathlist.length : 0;\n\n  let [path, setPath] = useState(\"\"); //Holds the copy of path to add\n  let [methodbuffer, setMethodBuffer] = useState(\"get\"); //holds the method of to add\n  let [insertionIndex, setIndex] = useState(formState.pathlist.length); //holds what order to dispatch request in\n  let [validPathInput, setValidPathInput] = useState(true); //bool tracking whether or not input supplied by user is good.\n\n  //Onchange function. Accepts good input rejects bad nd sets validPathinput accordingly\n  function onChange(e) {\n    let { name, value } = e.target;\n\n    if (name === \"path\") {\n      //handler for path\n      let pathgood = checkProperty(\"datapath\", value);\n      if (pathgood) setPath(value);\n      setValidPathInput(pathgood);\n    } else if (name === \"methodbuffer\") {\n      // method of endpoint type change handler\n      if (validateMethod(value)) {\n        setMethodBuffer(value);\n      }\n    } else if (name === \"index\") {\n      //insertion index of endpoint\n      if (isArray(formState.pathlist) && value <= pathlist.length)\n        setIndex(value);\n    }\n  }\n  function addPath() {\n    let formCopy = { ...formState };\n    let { pathlist } = formCopy;\n    let validpathlist = isArray(pathlist);\n    let pathObject = {};\n\n    if (\n      checkProperty(\"path\", path) &&\n      validpathlist &&\n      insertionIndex >= 0 &&\n      insertionIndex <= pathlist.length\n    ) {\n      pathObject[\"method\"] = methodbuffer;\n      pathObject[\"path\"] = path;\n      pathlist.splice(insertionIndex, 0, pathObject);\n      setForm(formCopy);\n      setPath(\"\");\n      setMethodBuffer(\"get\");\n      setIndex(formState.pathlist.length);\n      setValidPathInput(true);\n    } else {\n      setValidPathInput(false);\n    }\n  }\n\n  return (\n    <div className=\"col-12 form-row\">\n      <div className=\"form-group col-12 col-md-3\">\n        <label for=\"pathbuffer\">API-Endpoint</label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          value={path}\n          placeholder=\"/pathmustbeginwithforwardslash\"\n          name=\"path\"\n          onChange={(e) => onChange(e)}\n        />\n        {validPathInput ? (\n          <span className=\"form-text text-success\">Input valid</span>\n        ) : (\n          <span className=\"form-text text-danger\">\n            Input invalid. Path must begin with /.\n            Accepts:[^a-z0-9-._~:\\/?#\\[\\]@!$&'()*+,;=] Multiple consecutive\n            forwards slashes not allowed.\n          </span>\n        )}\n      </div>\n      <div className=\"form-group col-12 col-md-3\">\n        <label for=\"index\">Dispatch order.</label>\n        <input\n          name=\"index\"\n          type=\"number\"\n          min={0}\n          max={isArray(pathlist) ? pathlist.length : 0}\n          className=\"form-control\"\n          value={insertionIndex}\n          onChange={(e) => onChange(e)}\n        />\n      </div>\n      <div class=\"form-group col-12 col-md-3\">\n        <label for=\"methodbuffer\">Endpoint HTTP Method </label>\n        <select\n          id=\"path-method\"\n          className=\"form-control\"\n          onChange={(e) => {\n            onChange(e);\n          }}\n          name=\"methodbuffer\"\n        >\n          <option value=\"get\">get</option>\n          <option value=\"put\">put</option>\n          <option value=\"post\">post</option>\n          <option value=\"delete\">delete</option>\n        </select>\n      </div>\n      <div className=\"form-group col-12 col-md-3\">\n        <label for=\"add-path-btn\" className=\"text-white\">\n          Nothing to see here. :)\n        </label>\n        <input\n          type=\"button\"\n          className=\"form-control btn btn-outline-success\"\n          value=\"Add Endpoint\"\n          id=\"add-path-btn\"\n          onClick={addPath}\n        />\n      </div>\n    </div>\n  );\n}\nexport { PathList, AddPathToList };\n","import React, { useEffect, useState } from \"react\";\nimport {\n  validateRequestProps,\n  checkProperty,\n  validateDataProps,\n  notFalsy,\n} from \"../../Validator/Validator\";\n\nimport { post_edittestset, post_axios } from \"../../Axios/axiosroutes\";\nimport AddHeader from \"./AddHeader\";\nimport HeadersList from \"./HeadersList\";\nimport Axios from \"axios\";\nimport { AddPathToList, PathList } from \"./PathList\";\nimport MomentDatePicker from \"./MomentDatePicker\";\nimport moment from \"moment\";\n\nconst code_204_msg = \"Testsetname already exists.\";\nconst prop_strings = {\n  testsetname: \"testsetname\",\n  host: \"host\",\n  path: \"path\",\n  pathlist: \"pathlist\",\n  port: \"port\",\n  method: \"method\",\n  headers: \"headers\",\n  forks: \"forks\",\n  reqspersecond: \"reqspersecond\",\n  secondduration: \"scondduration\",\n  datafetch: \"datafetch\",\n  datahost: \"datahost\",\n  dataport: \"dataport\",\n  datamethod: \"datamethod\",\n  datapath: \"datapath\",\n  dataheaders: \"dataheaders\",\n};\nconst form_cell = \"col-12 col-md-6 form-group\";\nconst create_test = \"Create-Test\";\nconst edit_test = \"Edit-Test\";\nconst delete_test = \"Delete-Test\";\nconst preview_test = \"Preview-Test\";\nconst STATUS_NA = \"N/A\";\n\n//This function should only be called on a validated form and prior to the form being sent\n//to the server.\n//this method is needed when the user\nfunction prepForm(formState) {\n  let { datafetch } = formState;\n\n  if (datafetch === \"false\") {\n    formState.datahost = \"\";\n    formState.dataport = 1;\n    formState.datamethod = \"\";\n    formState.datapath = \"\";\n    formState.dataheaders = {};\n    formState.databody = \"\";\n  }\n\n  return formState;\n}\nfunction validateForm(formState) {\n  let validRequestProps = validateRequestProps(formState);\n\n  let validDataProps =\n    formState[\"datafetch\"] === \"true\" ? validateDataProps(formState) : true;\n  console.log(\n    \"Test SET DNE NOT IMPLEMENTED YET once server code done, finish it and add it here.\"\n  );\n  return validDataProps && validRequestProps;\n}\n\n//builds footer button options for the submit form\nfunction buildButtonOptions(\n  formtype,\n  formState,\n  setStatus,\n  resetForm,\n  setResetForm,\n  setWarning,\n  setReloadNames\n) {\n  let buttonOptions = null;\n  switch (formtype) {\n    case delete_test: //posts to delete testset route\n      buttonOptions = {\n        className: \"form-control btn-success\",\n        value: \"Delete-TestSet-\" + formState.testsetname,\n        httpFunction: () => {\n          post_axios(\"/deletetestset\", {\n            testsetname: formState.testsetname,\n          }).then(\n            (resp) => {\n              setStatus(resp.status);\n\n              if (resp.status === 200) {\n                setReloadNames((prevState) => !prevState);\n              }\n            },\n            (err) => {\n              setStatus(STATUS_NA);\n            }\n          );\n        },\n      };\n      break;\n    case edit_test: //posts to edittestset route\n      buttonOptions = {\n        className: \"form-control btn-success\",\n        value: \"Update-TestSet-\" + formState.testsetname,\n        httpFunction: () => {\n          let preppedForm = prepForm(formState);\n          post_edittestset(preppedForm).then(\n            (resp) => {\n              setStatus(resp.status);\n            },\n            (err) => {\n              setStatus(STATUS_NA);\n            }\n          );\n        },\n      };\n      break;\n    case preview_test:\n      buttonOptions = null;\n      break;\n    default:\n      buttonOptions = {\n        className: \"form-control btn-success\",\n        value: \"Create-New-TestSet\",\n        httpFunction: () => {\n          let preppedForm = prepForm(formState);\n          post_axios(\"/createtestset\", preppedForm).then(\n            (resp) => {\n              setStatus(resp.status);\n\n              if (resp.status === 200) {\n                setResetForm(!resetForm); //make brandnew form state\n                setWarning(buildWarningBools(formState)); //make warning labels off that new formstate\n              }\n            },\n            (err) => {\n              setStatus(STATUS_NA);\n            }\n          );\n        },\n      };\n      break;\n  }\n\n  return buttonOptions;\n}\n\nfunction buildWarningBools(formState) {\n  //This ret_val value is used for forms which edit an existing Test-Set.\n  let {\n    host,\n    pathlist,\n    testsetname,\n    port,\n    forks,\n    reqspersecond,\n    secondduration,\n    datafetch,\n    datahost,\n    dataport,\n    datapath,\n    datamethod,\n  } = formState;\n\n  return {\n    host: !checkProperty(\"host\", host),\n    protocol: false,\n    testsetname: !checkProperty(\"testsetname\", testsetname),\n    pathlist: !checkProperty(\"pathlist\", pathlist),\n    port: !checkProperty(\"port\", port),\n    method: false,\n    headers: false,\n    forks: !checkProperty(\"forks\", forks),\n    reqspersecond: !checkProperty(\"reqspersecond\", reqspersecond),\n    secondduration: !checkProperty(\"secondduration\", secondduration),\n    datafetch: !checkProperty(\"datafetch\", datafetch),\n    datahost: !checkProperty(\"datahost\", datahost),\n    dataport: !checkProperty(\"dataport\", dataport),\n    datamethod: false,\n    datapath: !checkProperty(\"datapath\", datapath),\n    dataheaders: false,\n    databody: false,\n  };\n}\n\nfunction SubmitForm(props) {\n  //edit indicates whether or not the user is using this form to edit an existing test set\n  // or whether or not the user is using to create a brand new test set.\n\n  let {\n    formtype,\n    formState,\n    setForm,\n    resetForm,\n    setResetForm,\n    setReloadNames,\n\n    status,\n    setStatus,\n  } = props;\n  let [formWarnings, setWarning] = useState(buildWarningBools(formState));\n\n  const buttonOptions = buildButtonOptions(\n    formtype,\n    formState,\n    setStatus,\n    resetForm,\n    setResetForm,\n    setWarning,\n    setReloadNames\n  );\n\n  useEffect(\n    function () {\n      setWarning(buildWarningBools(formState));\n    },\n    [formState]\n  );\n\n  function onChange(e) {\n    e.preventDefault();\n\n    let { name, value, type } = e.target; //get name and vale from obj through destructuring\n    let formStateCopy = { ...formState };\n    let formWarningsCopy = { ...formWarnings }; //copy of formWarnings to set new warning state to\n    let property_check = checkProperty(name, value);\n    let empty_string = type === \"text\" && value === \"\";\n\n    if (property_check || (type === \"text\" && value === \"\")) {\n      // prop value good.\n      //if prop value passes validation.\n      // set new state\n      formStateCopy[name] = value; //change form name to value\n      setForm(formStateCopy); //update formstate\n      empty_string\n        ? (formWarningsCopy[name] = true)\n        : (formWarningsCopy[name] = false); //set formWarnings of prop to false to display valid label.\n    } else formWarningsCopy[name] = true; // other wise display true label\n\n    setWarning(formWarningsCopy); //update warnings\n    setStatus(null);\n  }\n\n  //this function builds inputs of types of text or number\n  function buildTextNumberInput(\n    field_name, //The name of the formState property\n    labelText, //The label text of the input\n    placeholder, //The placeholder for the input\n    validtext, // the text to display when input is valid.\n    invalidText, //text for invalid input\n    input_type, // the type of the input text or number\n    min_number // for number inputs, the minimum acceptable number.\n  ) {\n    return (\n      <div class={form_cell}>\n        <label for={field_name}>{labelText}</label>\n        <input\n          {...min_number}\n          type={input_type}\n          className=\"form-control\"\n          id={field_name}\n          name={field_name}\n          placeholder={placeholder}\n          value={formState[field_name]}\n          onChange={(e) => onChange(e)}\n          disabled={formtype === delete_test}\n        />\n\n        {\n          //if prop invalid, set to invalid label. otherwise set to valid.\n          !formWarnings[field_name] ? (\n            <span class=\"form-text text-success\">{validtext}</span>\n          ) : (\n            <span class=\"form-text text-danger\">{invalidText}</span>\n          )\n        }\n      </div>\n    );\n  }\n\n  function getDisabledStatus() {\n    return formtype === delete_test || formtype === preview_test;\n  }\n\n  //builds select dropdown. label = form group label\n  //options = {innerHtml:what the user sees on drop down,value:what the react state maps to what the user sees}\n  //optons is also an array of strings which contains the values and innerhtml of the options inside the select.\n  function buildSelect(field_name, label, options, valid_msg) {\n    return (\n      <div class={form_cell}>\n        <label for={field_name}>{label}</label>\n        <select\n          id={field_name}\n          value={formState[field_name]}\n          onChange={onChange}\n          name={field_name}\n          className=\"form-control\"\n          disabled={getDisabledStatus()} //disable field if this delete type form which is readonly\n        >\n          {Array.isArray(options)\n            ? options.map((option) => {\n                return <option value={option}>{option}</option>;\n              })\n            : null}\n        </select>\n        <label for=\"field_name\" className=\"form-text text-success\">\n          {valid_msg}\n        </label>\n      </div>\n    );\n  }\n\n  //This function builds thre form footer which is just a button.\n  //however, the two footer options post to different backend routes .\n  function buildFormFooter() {\n    //if edit form build edit footer\n    let ret_val = null;\n    let invalid_label = (\n      <label for=\"submit-button\" className=\"form-text text-danger mx-2\">\n        Invalid form field detected. Correct the mistake and try again.\n      </label>\n    );\n    let valid_label = (\n      <label for=\"submit-button\" className=\"form-text text-success mx-2\">\n        Form value valid.\n      </label>\n    );\n    //If submit form needs a footer, formfooter will not be undefined\n    if (\n      buttonOptions !== undefined &&\n      typeof buttonOptions === \"object\" &&\n      buttonOptions !== null\n    ) {\n      let validForm = validateForm(formState);\n      ret_val = (\n        <div className=\" form-row border-top pt-2\">\n          {validForm ? (\n            <input\n              id=\"test-button\"\n              type=\"button\"\n              value={buttonOptions.value} //get value from footerobject\n              className={buttonOptions.className + \" col-12 col-md-4\"} //get class name frm footerobject\n              //if form not valid, retval is false, disable it\n              onClick={() => buttonOptions.httpFunction(formState.testsetname)} //get http function from footerobject\n              id=\"submit-button\"\n            />\n          ) : (\n            <input\n              id=\"test-button\"\n              type=\"button\"\n              value=\"Cannot Submit\" //get value from footerobject\n              className={\"btn-danger col-12 col-md-4\"} //get class name frm footerobject\n              //if form not valid, retval is false, disable it\n              disabled={true}\n            />\n          )}\n          {validForm ? valid_label : invalid_label}\n        </div>\n      );\n    }\n\n    return ret_val;\n  }\n\n  function getFormTitle() {\n    let title = null;\n\n    switch (formtype) {\n      case edit_test:\n        title = `TestSet ${formState.testsetname} Edit Form`;\n        break;\n      case delete_test:\n        title = `TestSet ${formState.testsetname} Delete Form`;\n        break;\n      case create_test:\n        title = \"Create a new Test-Set\";\n        break;\n      case preview_test:\n        title = \"Test-Set Preview\";\n        break;\n    }\n\n    return title;\n  }\n\n  return (\n    <div class=\"container border px-1\">\n      <div className=\"form-row bg-secondary\">\n        <h1 className=\"text-white\">{getFormTitle()}</h1>\n      </div>\n      <div class=\"form-row\">\n        {formtype !== create_test // if not creating a create type form, then dont allow usr to change testset name.\n          ? null\n          : buildTextNumberInput(\n              \"testsetname\",\n              \"TestSet Name\",\n              null,\n              \"TestSet name valid\",\n              \"The name is either taken or the TestSet name is an empty string. White space characters are not allow. Pick a new name.\",\n              \"text\",\n              null\n            )}\n        {buildTextNumberInput(\n          \"host\",\n          \"Hostname\",\n          \"www.hostname.com -> NS Record\",\n          \"Hostname input valid.\",\n          \"Bad input. Acceptance Criteria: /[a-z0-9.]/i\",\n          \"text\",\n          null\n        )}\n        {buildSelect(\"protocol\", \"HTTP/HTTPS setting\", [\"http\", \"https\"], null)}\n        {\n          //don't allow user to add paths if delete test is false.\n          getDisabledStatus() ? null : (\n            <AddPathToList formState={formState} setForm={setForm} />\n          )\n        }\n        <PathList\n          formState={formState}\n          setForm={setForm}\n          readonly={getDisabledStatus()}\n        />\n\n        {buildTextNumberInput(\n          \"port\",\n          \"TCP Port Of Test-Server\",\n          \"9999\",\n          \"Port field valid.\",\n          \"Bad Input. Accepts digits [0-9]. Accepted values, Port > 0. No decimals or fractions allowed.\",\n          \"number\",\n          1\n        )}\n        {buildTextNumberInput(\n          \"forks\",\n          \"# Of Request Sets Forks\",\n          null,\n          \"Number of Forks valid.\",\n          \"Accepted Inputs: [0-9]. Accepted Digits: [0-9]+ .Accepted Values: value >= 1. No decimals or fractions allowed.\",\n          \"number\",\n          1\n        )}\n        {buildTextNumberInput(\n          \"reqspersecond\",\n          \"Reqs Per Second To Dispatch\",\n          null,\n          \"Reqs Per Sec field valid\",\n          \"Accepted Inputs: [0-9]. Accepted Digits: [0-9]+ .Accepted Values: value >= 1. No decimals or fractions allowed.\",\n          \"number\",\n          1\n        )}\n        {buildTextNumberInput(\n          \"secondduration\",\n          \"RPS Duration\",\n          null,\n          \"Reqs Per Sec field valid\",\n          \"Accepted Inputs: [0-9]. Accepted Digits: [0-9]+. Accepted Values: value >= 1\",\n          \"number\",\n          1\n        )}\n\n        {buildSelect(\n          \"datafetch\",\n          \"Fetch Header/Body Data Pre Request Dispatch?\",\n          [\"false\", \"true\"],\n          \"Fetch value valid.\"\n        )}\n      </div>\n      <div className=\"form-row\">\n        {formState.datafetch === \"false\"\n          ? null\n          : [\n              <div class=\"col-12 bg-secondary justify-content-start\">\n                <h3 className=\"text-white col mr-auto\">Data-Form</h3>\n              </div>,\n              buildTextNumberInput(\n                \"datahost\",\n                \"Data Hostname\",\n                \"www.hostname.com -> NS Record\",\n                \"Data Hostname valid.\",\n                \"Input invalid. Acceptance Criteria: /[a-z0-9.]/i\",\n                \"text\",\n                null\n              ),\n              buildTextNumberInput(\n                \"datapath\",\n                \"/Path/On/Datahost\",\n                \"/Path/On/Datahost -> A Record.\",\n                \"Pathname valid.\",\n                \"Bad input. Must be empty string or string starting with /\",\n                \"text\",\n                null\n              ),\n              buildTextNumberInput(\n                \"dataport\",\n                \"TCP Port Of Data Server\",\n                \"9999\",\n                \"Port field valid.\",\n                \"Accepts digits:+[0-9]. Accepts values: port > 0,  No decimals or fractions allowed.\",\n                \"number\",\n                1\n              ),\n              buildSelect(\n                \"datamethod\",\n                \"HTTP(S) Method\",\n                [\"get\", \"put\", \"post\", \"delete\"],\n                \"HTTP(S) method valid\"\n              ),\n              //only render the option to add headers if the form is not used as delete form\n              getDisabledStatus() ? null : (\n                <AddHeader\n                  setForm={setForm}\n                  headers_name={\"dataheaders\"}\n                  formState={formState}\n                />\n              ),\n              <HeadersList\n                headers_name={\"dataheaders\"}\n                formState={formState}\n                setForm={setForm}\n                readonly={getDisabledStatus()}\n              />,\n            ]}\n      </div>\n\n      {formState !== preview_test ? buildFormFooter() : null}\n    </div>\n  );\n}\n\nexport { SubmitForm, create_test, delete_test, edit_test };\n","import React from \"react\";\nimport { notFalsy } from \"../Validator/Validator\";\n\nconst STATUS_NA = \"N/A\";\n\nfunction buildServerStripType(formtype) {\n  let properties = {\n    title: \"Create Testset Server Response\",\n    code_200_msg: \"Testset created.\",\n    code_204_msg:\n      \"Testset was not created. Perhaps, the name is already taken.\",\n    code_400_msg: \"Test set was not created. Did not pass back end validation.\",\n    code_500_msg: \"Server error. Testset not created.\",\n  };\n  switch (formtype) {\n    case \"Edit-Test\":\n      properties = {\n        title: \"Edit Testset server response\",\n        code_200_msg: \"Testset update persisted.\",\n        code_204_msg: \"Testset update processed but not persisted.\",\n        code_400_msg:\n          \"Testset did not pass backend validation.Updated testset not persisted.\",\n        code_500_msg: \"Testset not persisted. Server error.\",\n      };\n      break;\n    case \"Delete-Test\":\n      properties = {\n        title: \"Delete test server response.\",\n        code_200_msg: \"Testset annihilated.\",\n        code_204_msg: \"Testset deletion started but not completed.\",\n        code_400_msg: \"Bad input given to server.\",\n        code_500_msg: \"Server error.\",\n      };\n      break;\n  }\n\n  return <ServerStrip status={\"status\"} {...properties} />;\n}\n\nfunction ServerStrip(props) {\n  let status = notFalsy(props.status) ? props.status : STATUS_NA;\n  let text_className = \"text-success\";\n\n  switch (status) {\n    case 200:\n    case 204:\n      break;\n    case 400:\n      text_className = \"text-danger\";\n      break;\n    case 500:\n      text_className = \"text-warning\";\n      break;\n    default:\n      text_className = \"text-primary\";\n      break;\n  }\n  return (\n    <div className=\"form-row\">\n      <h2>{notFalsy(props.title) ? props.title : \"Server-Response\"}</h2>\n      <div className=\"col-12\">\n        {\" \"}\n        Status Code: <span className={text_className}></span>{\" \"}\n        {notFalsy(status) ? status : STATUS_NA}\n      </div>\n      <div className=\"col-12\">\n        <h4>Status Legend</h4>\n        <ul>\n          <li className=\"text-success\">\n            200:{\" \"}\n            {props.code_200_msg ? props.code_200_msg : \"Operation Successful\"}\n          </li>\n          <li className=\"text-success\">\n            204:{\" \"}\n            {notFalsy(props.code_204_msg)\n              ? props.code_204_msg\n              : \"Operation processed did not complete.\"}\n          </li>\n          <li className=\"text-danger\">\n            400:{\" \"}\n            {notFalsy(props.code_400_msg)\n              ? props.code_400_msg\n              : \"Operation processed but not completed. Bad user input.\"}\n          </li>\n          <li className=\"text-warning\">\n            500:{\" \"}\n            {notFalsy(props.code_500_msg)\n              ? props.code_500_msg\n              : \"Operation did not complete. Server error.\"}\n          </li>\n          <li className=\"text-primary\">\n            N/A: No requests sent to server. No response available.{\" \"}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport { ServerStrip };\n","import React, { useState, useEffect } from \"react\";\nimport { SubmitForm, create_test } from \"./SubmitForm\";\nimport { ServerStrip } from \"../../StaticComponents/ServerStrip\";\nfunction CreateForm(props) {\n  let [formState, setForm] = useState(buildNewTestForm()); //Build empty Test form\n  let [resetForm, setResetForm] = useState(false); //this state variable triggers resetting of formState effect\n  let [status, setStatus] = useState(\"N/A\");\n\n  function buildNewTestForm() {\n    //This ret_val value is used for forms which edit an existing Test-Set.\n    return {\n      host: \"\",\n      protocol: \"http\",\n      testsetname: \"\",\n      pathlist: [],\n      port: 1,\n      method: \"get\",\n      headers: {},\n      forks: 1,\n      reqspersecond: 1000,\n      secondduration: 3,\n      datafetch: \"true\",\n      datahost: \"\",\n      dataport: 1,\n      datamethod: \"post\",\n      datapath: \"\",\n      dataheaders: {},\n      databody: \"\",\n    };\n  }\n\n  useEffect(() => {\n    setForm(buildNewTestForm());\n  }, [resetForm]);\n\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <ServerStrip status={status} />\n      </div>\n      <SubmitForm\n        formtype={create_test}\n        setForm={setForm}\n        formState={formState}\n        resetForm={resetForm}\n        setResetForm={setResetForm}\n        status={status}\n        setStatus={setStatus}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default CreateForm;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nfunction Nav(props) {\n  return (\n    <nav\n      className=\"navbar navbar-expand-md fixed-top navbar-dark border-bottom\"\n      style={{\n        background:\n          \"linear-gradient(90deg, rgba(0,210,26,1) 0%, rgba(0,179,130,1) 100%)\",\n      }}\n    >\n      <a className=\"navbar-brand badge\">Test-Sets</a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#collapser\"\n        aria-controls=\"collapser\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"collapser\">\n        <ul className=\"navbar-nav ml-auto\">\n          <Link to=\"tutorials\" className=\"nav-item\">\n            <a className=\"nav-link\">Tutorials</a>\n          </Link>\n          <Link to=\"newset\" className=\"nav-item\">\n            <a className=\"nav-link\">New-Test-Set</a>\n          </Link>\n          <Link to=\"editset\" className=\"nav-item\">\n            <a className=\"nav-link\">Edit/Delete-Test-Set</a>\n          </Link>\n          <Link to=\"reports\" className=\"nav-item\">\n            <a className=\"nav-link\">View-Reports</a>\n          </Link>\n          <Link to=\"runset\" className=\"nav-item\">\n            <a className=\"nav-link\">Run Testset</a>\n          </Link>\n        </ul>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState, useEffect } from \"react\";\nimport { notFalsy, checkProperty } from \"../../Validator/Validator\";\nimport { SubmitForm, delete_test, edit_test } from \"../SubmitForm/SubmitForm\";\nimport {\n  get_testsetnames,\n  process_testsetnames,\n  post_testsetname,\n} from \"../../Axios/axiosroutes\";\nimport LoadingSpinner from \"../../StaticComponents/loadingSpinner\";\n\nimport { ServerStrip } from \"../../StaticComponents/ServerStrip\";\nconst combobox = \"combox\";\nconst select = \"select\";\n\nfunction FormNotFound(selectedTestSetName) {\n  return (\n    <div className=\"container\">\n      {\" \"}\n      <div class=\"form-row\">\n        <p>\n          No forms associated with{\" \"}\n          {notFalsy(selectedTestSetName)\n            ? selectedTestSetName\n            : \"Falsy-esque Testsetname\"}{\" \"}\n          discovered. If you're sure one exists, make sure the server is up and\n          running.{\" \"}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction FormList(props) {\n  let [reloadTestsetNames, setReloadNames] = useState(true);\n  let [testsetnames, settestsetnames] = useState(null); //used to activate an effect responsible for fetching data for this component.4\n  let { dropdown_options, title } = props;\n  let [selectedTestsetName, setSelectedTestsetName] = useState(\"\"); // this holds the testset name the user inputs into combobox.\n  let [selectedForm, setSelectedForm] = useState(null); // when a test setname matches a form in the formsArray, that form is held hostage in these variables.\n  let [formtype_option, setOption] = useState(dropdown_options[0]); //this pair of variables holds the options of the very lovely dropdown select.\n  let [status, setStatus] = useState(\"N/A\");\n  function gettestsetnames_handler() {\n    get_testsetnames().then((resp) => {\n      let namesarray = process_testsetnames(resp.data);\n      settestsetnames(namesarray);\n    });\n  }\n\n  function post_testsetname_handler() {\n    post_testsetname(selectedTestsetName).then(\n      (resp) => {\n        if (resp.status === 200) {\n          setSelectedForm(resp.data.testset);\n        } else {\n          setSelectedForm(null);\n        }\n      },\n      (err) => {}\n    );\n  }\n\n  useEffect(gettestsetnames_handler, []);\n  useEffect(() => {\n    gettestsetnames_handler();\n    setSelectedTestsetName(\"\");\n  }, [reloadTestsetNames]);\n  useEffect(post_testsetname_handler, [selectedTestsetName]);\n  //onchange function for this component\n  function onChange(e) {\n    let { name, value } = e.target;\n    let whitespaceTest = /\\s/gi;\n    e.preventDefault();\n\n    switch (name) {\n      case combobox:\n        //if no whitespaces set selectedItemname to value.\n        if (checkProperty(\"testsetname\", value) || value === \"\")\n          setSelectedTestsetName(value);\n        break;\n      case select: //options are predefined, so no validation since theres no input error.Call setter right off the bat.\n        setOption(value);\n        break;\n    }\n  }\n\n  //This function selects what kind of submit form to build based on the formtype property\n  //for example, if formtype === edit_form, then the edit form will be built.\n  function buildSubmitFormFromFormType() {\n    let retForm = null; //by default return form docs if a form can't be selected.\n\n    //If selected form === null, then the user has entered an invalid form name, and thus\n    //we need not render any Submit forms, and should instead render the informative warning retForm is\n    // initted to.\n    if (selectedForm !== null)\n      switch (formtype_option) {\n        case delete_test:\n          retForm = (\n            <SubmitForm\n              formtype={formtype_option}\n              formState={selectedForm}\n              setForm={setSelectedForm}\n              setReloadNames={setReloadNames}\n              status={status}\n              setStatus={setStatus}\n            />\n          );\n          break;\n        case edit_test:\n          retForm = (\n            <SubmitForm\n              formtype={formtype_option}\n              formState={selectedForm}\n              setForm={setSelectedForm}\n              setReloadNames={setReloadNames}\n              status={status}\n              setStatus={setStatus}\n            />\n          );\n          break;\n      }\n\n    return retForm;\n  }\n\n  function buildSelects() {\n    let fetchingdata = testsetnames instanceof Promise;\n\n    return (\n      <div className=\"form container bg-secondary\">\n        <div className=\"form-row text-white\">\n          <h1>{title}</h1>\n        </div>\n        <div className=\"form-row\">\n          <div className=\"form-group col-12 col-md-3\">\n            <React.Fragment>\n              <label for=\"combox\" className=\"text-white\">\n                Test Set Combobox\n              </label>\n              <input\n                list=\"primaries\"\n                value={selectedTestsetName}\n                className=\"form-control\"\n                name={combobox}\n                placeholder=\"Enter quarry here\"\n                onChange={onChange}\n                disabled={\n                  //disable the input if testsetnames are falsy\n                  fetchingdata\n                }\n              />\n            </React.Fragment>\n\n            <datalist id=\"primaries\">\n              {\n                //populate datalist with testsetnames.\n                notFalsy(testsetnames)\n                  ? testsetnames.map((testsetname) => (\n                      <option value={testsetname}>{testsetname}</option>\n                    ))\n                  : null\n              }\n            </datalist>\n          </div>\n\n          <div className=\"form-group col-12 col-md-3\">\n            <React.Fragment>\n              <label for=\"primaries\" className=\"text-white\">\n                Action To Take\n              </label>\n              <select\n                value={formtype_option}\n                id=\"select-option\"\n                className=\"form-control\"\n                onChange={onChange}\n                name={select}\n                disabled={!notFalsy(dropdown_options)}\n              >\n                {notFalsy(dropdown_options)\n                  ? dropdown_options.map((option) => {\n                      return <option value={option}>{option}</option>;\n                    })\n                  : null}\n              </select>\n            </React.Fragment>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {buildSelects()}\n      <div className=\"container\"> {<ServerStrip status={status} />}</div>\n      {notFalsy(selectedForm)\n        ? buildSubmitFormFromFormType()\n        : FormNotFound(selectedTestsetName)}\n    </React.Fragment>\n  );\n}\n\nexport { FormList };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  notFalsy,\n  numberCheck,\n  validateReportObject,\n  notNullUndefined,\n} from \"../../Validator/Validator\";\n\nimport \"./Report.css\";\nimport { ServerStrip } from \"../../StaticComponents/ServerStrip\";\n\nfunction NumberSelect(props) {\n  let { report_length, setSelectedIndex, selectedReqResIndex, report } = props;\n  let [indexWarning, setIndexWarning] = useState(false);\n\n  console.log(\"Report_length:  \" + report_length);\n  function onChange(e) {\n    let { name, value } = e.target;\n    let indexValue = value;\n    // set value to 0 zero if it is falsy.\n    //value is used as an index and empty string values cause crashes, so in the case\n    //of an undefined, null, and etc value, just set it to zero.\n    if (numberCheck(value) && notFalsy(report) && notFalsy(report[value])) {\n      setIndexWarning(false); //turn off warning if one has been turned on.\n    } else {\n      setIndexWarning(true); // empty and or falsy input detected.\n      indexValue = 0; //set index value to zero since empty strings are considered falsy and cause the app to crash.\n    }\n\n    setSelectedIndex(indexValue);\n  }\n  return (\n    <div className=\"form-row border-bottom\">\n      <div className=\"form-group col-12 col-md-4\">\n        <label for=\"report-select\">Select Report By Dispatch Order</label>\n        <input\n          id=\"report-select\"\n          type=\"number\"\n          onChange={onChange}\n          min={0}\n          max={report_length - 1}\n          disabled={report_length === 0}\n          className=\"form-control\"\n          value={selectedReqResIndex}\n        />\n        {indexWarning ? (\n          <span className=\"form-text text-danger\">\n            Empty number selects and values below zero are not allowed.\n          </span>\n        ) : null}\n        {report_length === 0 ? (\n          <span className=\"form-text text-warning\">No reports discovered.</span>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nfunction Report(props) {\n  let [selectedReqResIndex, setSelectedIndex] = useState(0); // Dispatch index of {req,res pair}\n\n  let [pathList, setPathList] = useState([]);\n\n  let [selectedPath, setSelectedPath] = useState(\"\");\n  let [selectedPathReport, setSelectedPathReport] = useState(null);\n  let [report_length, setReportLength] = useState(0);\n\n  let { selectedTestSet, selectedReportName, report, msg, status } = props;\n\n  function onChange(e) {\n    let { value } = e.target;\n\n    setSelectedPath(value);\n  }\n\n  //Effect Chain start---------------------\n  useEffect(() => {\n    if (notFalsy(report) && typeof report === \"object\") {\n      let paths = Object.keys(report);\n\n      //If actual paths exist for this report\n      if (paths.length > 0) {\n        let selectedPath = paths[0];\n        let pathReport = report[selectedPath];\n        let report_len = Object.keys(pathReport).length;\n\n        setPathList(paths); //set the pathlist and selected report.\n        setSelectedPath(selectedPath);\n        setSelectedPathReport(report[selectedPath]);\n        setReportLength(report_len);\n        setSelectedIndex(0);\n      }\n    }\n  }, [report]);\n\n  //anytime the selected path changes, then load the associated report_value\n  useEffect(() => {\n    if (\n      notFalsy(selectedPath) &&\n      notFalsy(report) &&\n      notFalsy(report[selectedPath])\n    ) {\n      setSelectedIndex(0);\n      setSelectedPathReport(report[selectedPath]);\n    }\n  }, [selectedPath]);\n\n  useEffect(() => {\n    if (\n      notFalsy(selectedPathReport) &&\n      typeof selectedPathReport === \"object\"\n    ) {\n      let report_len = Object.keys(selectedPathReport).length;\n      setReportLength(report_len);\n    }\n  }, [selectedPathReport]);\n\n  function processHeaderData({ headers }) {\n    let headerProperties = Object.keys(headers);\n    let headerLength =\n      notFalsy(headers) && typeof headers === \"object\"\n        ? Object.keys(headers).length\n        : 0;\n    let headers_rows = [];\n    let headerName = null;\n    let headerValue = null;\n    let table_row_header = null;\n\n    if (headerLength > 0) {\n      table_row_header = (\n        <thead>\n          <th scope=\"col\">Header Name</th>\n          <th scope=\"col\"> Header Value</th>\n        </thead>\n      );\n\n      for (let i = 0; i < headerProperties.length; i++) {\n        headerName = headerProperties[i + \"\"];\n        headerValue = headers[headerName];\n        headers_rows.push(\n          <tr>\n            <td>{headerName}</td>\n            <td>{headerValue}</td>\n          </tr>\n        );\n      }\n    } else\n      headers_rows = (\n        <tr>\n          <td colSpan=\"2\">\n            No header info supplied in the HTTP req/res object.\n          </td>\n        </tr>\n      );\n\n    return (\n      <React.Fragment>\n        {table_row_header}\n        <tbody>{headers_rows}</tbody>\n      </React.Fragment>\n    );\n  }\n\n  function DataRender(props) {\n    let { data, display_type } = props;\n    let ret_element = (\n      <div className=\"col-12\">\n        {\" \"}\n        <h2 className=\"badge badge-danger\">React App Error</h2>\n      </div>\n    );\n\n    if (\n      notFalsy(data) &&\n      typeof data === \"object\" &&\n      notFalsy(data.headers) &&\n      notNullUndefined(data.body)\n    ) {\n      if (display_type === \"headers\")\n        ret_element = (\n          <table className=\"table custom-table\">\n            {processHeaderData(data)}\n          </table>\n        );\n      else if (display_type === \"body\") {\n        let { body } = data;\n\n        if (typeof body !== \"string\") {\n          body = JSON.stringify(body, null, \"   \");\n        }\n        ret_element = (\n          <table className=\"table custom-table\">\n            <thead>\n              {\" \"}\n              <tr>\n                <th colSpan=\"1\">Body String Data</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\" \"}\n              <pre> {body}</pre>\n            </tbody>\n          </table>\n        );\n      }\n    }\n\n    return ret_element;\n  }\n\n  {\n    return !notFalsy(selectedPathReport) && report_length > 0 ? (\n      <React.Fragment>\n        <div className=\"col-12 bg-secondary\">\n          <h2 className=\"text-warning\">\n            {\" \"}\n            The report could not be located on the server OR the report stored\n            on the server did not pass front-end/back-end validation.\n          </h2>\n          <p className=\"text-white\">\n            TestSet: {selectedTestSet} <br></br>\n            ReportName: {selectedReportName} <br></br>\n            <br></br>\n            This TestSet/Report combination could not be found on the server.{\" \"}\n            <br></br>\n            The message returned from the server is: <br></br>\n            <span className=\"text-danger\"> {msg} </span>\n            <br></br>\n            1) Make sure the Testset name is a valid name, by selecting or\n            matching a testset name in the dropdown. <br></br>\n            2) The selected report name should always be valid since the drop\n            down list is generated through data supplied from the back end. 3)\n            If both conditions above are satisfied, then it is very likely an\n            invalid report is stored in the database. An invalid report is one\n            which is missing one or both the req and res fields in one or more\n            of the dispatched requests.\n          </p>\n        </div>\n        <ServerStrip status={status} />\n      </React.Fragment>\n    ) : (\n      <React.Fragment>\n        <div className=\"form-row\">\n          <div className=\"form-group col-12 col-md-4\">\n            <label for=\"combox\" className=\"text-primary\">\n              Select A Path\n            </label>\n            <select\n              list=\"paths-list\"\n              value={selectedPath}\n              className=\"form-control\"\n              name={\"combobox\"}\n              placeholder=\"Enter quarry here\"\n              onChange={onChange}\n              id=\"combobox\"\n              disabled={\n                //disable the input if testsetnames are not arrays or if it is an array it is array of length zero.\n                !Array.isArray(pathList) || pathList.length === 0\n              }\n            >\n              {\n                //populate datalist with testsetnames.\n                Array.isArray(pathList) && pathList.length > 0\n                  ? pathList.map((path) => <option value={path}>{path}</option>)\n                  : null\n              }\n            </select>\n          </div>\n        </div>\n        {notFalsy(selectedPathReport) && report_length > 0 ? (\n          <React.Fragment>\n            <NumberSelect\n              report_length={report_length}\n              setSelectedIndex={setSelectedIndex}\n              selectedReqResIndex={selectedReqResIndex}\n              report={selectedPathReport}\n            />\n          </React.Fragment>\n        ) : null}\n        <div className=\"form-row\">\n          {report_length > 0 ? (\n            <React.Fragment>\n              <h2 className=\"col-12\">\n                Response Report for: {selectedReportName} on Path {selectedPath}{\" \"}\n              </h2>\n              <h3>\n                Status Code:{\" \"}\n                {selectedPathReport[selectedReqResIndex].res.status}\n              </h3>\n              <DataRender\n                display_type=\"headers\"\n                data={selectedPathReport[selectedReqResIndex].res}\n              />\n              <DataRender\n                display_type=\"body\"\n                data={selectedPathReport[selectedReqResIndex].res}\n              />\n            </React.Fragment>\n          ) : null}\n\n          {report_length > 0 ? (\n            <React.Fragment>\n              <h2 className=\"col-12\">\n                Request Report for: {selectedReportName} on Path {selectedPath}\n              </h2>\n\n              <DataRender\n                display_type=\"body\"\n                data={selectedPathReport[selectedReqResIndex].req}\n              />\n\n              <DataRender\n                display_type=\"headers\"\n                data={selectedPathReport[selectedReqResIndex].req}\n              />\n            </React.Fragment>\n          ) : (\n            <h3 className=\"text-warning\">\n              {\" \"}\n              The report is empty. There is no request and response information\n              to show here. Boxes some check status code to show matching\n              reports here.{\" \"}\n            </h3>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Report;\n","import React, { useState, useEffect } from \"react\";\nimport { post_axios, get_axios } from \"../../Axios/axiosroutes\";\nimport {\n  notNullUndefined,\n  notFalsy,\n  validateTestSetReports,\n  checkProperty,\n} from \"../../Validator/Validator\";\n\nimport Report from \"./Report\";\nimport { ServerStrip } from \"../../StaticComponents/ServerStrip\";\nimport { isArray } from \"jquery\";\nconst NA_status = \"N/A\";\n\nfunction processServerResponse(server_array, field_name) {\n  let ret = [];\n  let array_element = null;\n\n  if (Array.isArray(server_array)) {\n    for (\n      let server_array_i = 0;\n      server_array_i < server_array.length;\n      server_array_i++\n    ) {\n      if (field_name !== \"testsetname\") {\n        //get path keys\n\n        array_element = server_array[server_array_i][\"report_name\"];\n        ret.push(array_element);\n      } else {\n        array_element = server_array[server_array_i][field_name];\n        if (notFalsy(array_element)) ret.push(array_element);\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction validateArrayResp(obj) {\n  let ret_object = true;\n  if (notNullUndefined(obj)) {\n    if (!Array.isArray(obj)) {\n      ret_object = false;\n    }\n  } else {\n    ret_object = false;\n  }\n\n  return ret_object;\n}\n\nfunction buildStatusArrayFromCheckObject(checkObject) {\n  let statusArray = []; //our status array object\n  let statusKeysIterator = null; //iterator that goes through keys of checkObject\n\n  if (notNullUndefined(checkObject) && typeof checkObject === \"object\") {\n    //basic object validation\n    let statusKeys = Object.keys(checkObject); //Get keys or statuses from checkobject\n\n    //fo through entire array and add status whcih dont already exist.\n    for (let i = 0; i < statusKeys.length; i++) {\n      statusKeysIterator = statusKeys[i];\n\n      if (statusArray.indexOf(statusKeysIterator) === -1) {\n        statusArray.push(statusKeysIterator);\n      }\n    }\n  }\n\n  return statusArray;\n}\n//report object = {  dispatchindex_0: {req,res}, dispatchindex_1:{req,res} ... }\nfunction buildStatusCodeCheckObject(report) {\n  let path_keys = Object.keys(report);\n  let path_report = null;\n  let path_report_length = 0;\n  let res_status = null;\n  let statusCodes = {};\n\n  if (path_keys.length > 0) {\n    for (let report_i = 0; report_i < path_keys.length; report_i++) {\n      path_report = report[path_keys[report_i]];\n      path_report_length = 0;\n      if (notFalsy(path_report))\n        path_report_length = Object.keys(path_report).length;\n\n      for (let reqres_i = 0; reqres_i < path_report_length; reqres_i++) {\n        res_status =\n          notFalsy(path_report[reqres_i].res) &&\n          notFalsy(path_report[reqres_i].res.status)\n            ? path_report[reqres_i].res.status\n            : null;\n        if (notFalsy(res_status) && statusCodes[res_status] === undefined)\n          statusCodes[res_status] = true;\n      }\n    }\n  }\n  return statusCodes;\n}\n\nfunction filterReportsOnPath(pathobject, status_filter) {\n  let filteredPathObject = {};\n  let filtered_i = 0;\n  let reqrespair = null;\n  let unfilitered_length = 0;\n\n  if (\n    notFalsy(pathobject) &&\n    typeof pathobject === \"object\" &&\n    notFalsy(status_filter) &&\n    typeof status_filter === \"object\"\n  ) {\n    unfilitered_length = Object.keys(pathobject).length;\n\n    for (\n      let unfilitered_i = 0;\n      unfilitered_i < unfilitered_length;\n      unfilitered_i++\n    ) {\n      reqrespair = pathobject[unfilitered_i];\n\n      if (\n        notFalsy(reqrespair) &&\n        notFalsy(reqrespair.res) &&\n        notFalsy(reqrespair.res.status)\n      ) {\n        let status = reqrespair.res.status;\n\n        if (status_filter[status] === true) {\n          filteredPathObject[filtered_i + \"\"] = reqrespair; //need to convert filtered_i to string since dictionaries indexed by integers, are integerstrings\n          filtered_i++;\n        }\n      }\n    }\n  }\n\n  return filteredPathObject;\n}\nfunction filterLoadedReport(loadedReportObject, status_filter) {\n  let filteredObject = {}; // make a copy of the source report object.\n  if (\n    notFalsy(loadedReportObject) &&\n    typeof loadedReportObject === \"object\" &&\n    Object.keys(loadedReportObject).length > 0\n  ) {\n    let pathlist = Object.keys(loadedReportObject);\n\n    pathlist.map((path) => {\n      let path_report_object = loadedReportObject[path];\n      filteredObject[path] = filterReportsOnPath(\n        path_report_object,\n        status_filter\n      );\n    });\n  }\n\n  return filteredObject;\n}\n\nfunction findReport(reportName, reportValues) {\n  let returnReport = null;\n  let retVal = null;\n\n  if (\n    notFalsy(reportName) &&\n    notFalsy(reportValues) &&\n    Array.isArray(reportValues)\n  ) {\n    let length_reports = reportValues.length;\n    let report_i = 0;\n    let report_object = null;\n\n    while (report_i < length_reports && returnReport === null) {\n      report_object = reportValues[report_i];\n\n      if (report_object[\"report_name\"] === reportName)\n        returnReport = report_object;\n\n      report_i++;\n    }\n  }\n\n  if (returnReport !== null) retVal = returnReport.report_value;\n\n  return retVal;\n}\n\nfunction renderReport(selectedReportName, filteredTestsetReports) {\n  let retVal = (\n    <div className=\"form-row\">\n      <h3 className=\"text-warning col-12\">Empty Report</h3>\n      <p>\n        {\" \"}\n        The selected report could not be found, is empty, or incomplete in some\n        way. Unable to render results of such reports.\n      </p>\n    </div>\n  );\n\n  if (\n    notFalsy(selectedReportName) &&\n    notFalsy(filteredTestsetReports) &&\n    validateTestSetReports(filteredTestsetReports)\n  )\n    retVal = (\n      <Report\n        selectedReportName={selectedReportName}\n        report={filteredTestsetReports}\n        status={\"TEST-WORKOUT IN REPORTLIST\"}\n      />\n    );\n\n  return retVal;\n}\nfunction ReportList(props) {\n  let [testsetnames, setTestsetNames] = useState([]);\n\n  let [testsetReportNames, setTestsetReportsNames] = useState([]);\n  let [testsetReportsValues, setTestsetReportsValues] = useState([]);\n\n  let [selectedTestSetName, setSelectedTestSetName] = useState(\"\"); //Name of currently selected testset\n  let [selectedReportName, setSelectedPathReportName] = useState(\"\"); //Name of selected report\n\n  let [selectedReport, setSelectedReport] = useState(null); //value of selectedReportName\n  let [filteredTestsetReports, setFilteredLoadedReportObject] = useState(null); //filtered selected reportvalue.\n\n  let [checkBoxFilter, setCheckBoxFilter] = useState({}); //checkbox filter for status.\n  let [status, setStatus] = useState(null);\n  const reportToRender = renderReport(\n    selectedReportName,\n    filteredTestsetReports\n  );\n\n  let [validTestsetName, setValidTestsetName] = useState(false);\n\n  useEffect(() => {\n    getTestSetNames();\n  }, []);\n\n  //#2 gettestsetnames always sets selected testsetnme to the first report if one exists\n  //load all the reports for that testset. get all the report names and save all of those\n  //reports in Tessetreportvalues.\n  // saved report values are organized like so { report_name0:report_value, ... , report_nameN: report_valueN}\n  //furthermore if the loaded report object is not empty, the selectedReportname is set to the first report name.\n  useEffect(() => {\n    if (notFalsy(selectedTestSetName))\n      post_axios(\"/loadtestsetreports\", {\n        testsetname: selectedTestSetName,\n      }).then((resp) => {\n        if (resp.status === 200) {\n          let processedArray = processServerResponse(resp.data, \"reports\");\n\n          if (isArray(processedArray) && processedArray.length > 0) {\n            let testsetReports = resp.data;\n            let reportName = processedArray[0];\n            let selectedReport_Value = findReport(reportName, testsetReports);\n            let checkBoxFilter_value = buildStatusCodeCheckObject(\n              selectedReport_Value\n            );\n            let filteredTestsetReports = filterLoadedReport(\n              selectedReport_Value,\n              checkBoxFilter_value\n            );\n            setTestsetReportsNames(processedArray);\n            setTestsetReportsValues(testsetReports);\n            setSelectedPathReportName(reportName);\n            setSelectedReport(selectedReport_Value[reportName]);\n            setCheckBoxFilter(checkBoxFilter_value);\n            setFilteredLoadedReportObject(filteredTestsetReports);\n          }\n        } else {\n          setTestsetReportsNames([]);\n          setTestsetReportsValues([]);\n          setSelectedPathReportName(\"\");\n          setSelectedReport(null);\n          setCheckBoxFilter(null);\n          setFilteredLoadedReportObject(null);\n        }\n        setStatus(resp.status);\n      });\n  }, [selectedTestSetName]);\n\n  useEffect(() => {\n    let notFalsyTestsetReports =\n      notFalsy(testsetReportsValues) &&\n      typeof testsetReportsValues === \"object\" &&\n      Object.keys(testsetReportsValues).length > 0;\n\n    if (notFalsy(selectedReportName) && notFalsyTestsetReports) {\n      let selectedReport = findReport(selectedReportName, testsetReportsValues);\n      let checkFilter = buildStatusCodeCheckObject(selectedReport);\n      let filteredReport = filterLoadedReport(selectedReport, checkFilter);\n\n      setSelectedReport(selectedReport);\n      setCheckBoxFilter(checkFilter);\n      setFilteredLoadedReportObject(filteredReport);\n    }\n  }, [selectedReportName]);\n\n  useEffect(() => {\n    let filteredReport = filterLoadedReport(selectedReport, checkBoxFilter);\n    setFilteredLoadedReportObject(filteredReport);\n  }, [checkBoxFilter]);\n\n  //this effect ensures all properties in the reportlist are valid.\n\n  function onChange(e) {\n    let { name, value } = e.target;\n    let whitespace_chars_present = /\\s/.test(value);\n\n    if (!whitespace_chars_present)\n      switch (name) {\n        case \"combobox\":\n          let testname_valid = checkProperty(\"testsetname\", value);\n          setSelectedTestSetName(value);\n          setValidTestsetName(testname_valid);\n          break;\n        case \"select\":\n          setSelectedPathReportName(value);\n          break;\n      }\n  }\n\n  function stringToBool(value) {\n    let bool = true;\n\n    if (value === \"false\") bool = false;\n\n    return bool;\n  }\n\n  function statusFilterOnChange(e) {\n    let { name, checked } = e.target;\n    let checkBoxFilterObjectCopy = { ...checkBoxFilter };\n    checkBoxFilterObjectCopy[name] = checked; //might need to use checked instead of value\n    setCheckBoxFilter(checkBoxFilterObjectCopy);\n  }\n\n  function getTestSetNames() {\n    get_axios(\"/gettestsetnames\", {}).then(\n      (response) => {\n        let testsetnames_response = response.data;\n\n        if (\n          response.status === 200 &&\n          validateArrayResp(testsetnames_response)\n        ) {\n          let testsetnames = processServerResponse(\n            testsetnames_response,\n            \"testsetname\"\n          );\n          setTestsetNames(testsetnames);\n\n          if (testsetnames.length > 0) {\n            let testsetname = testsetnames[0];\n            let valid_name = checkProperty(\"testsetnames\", testsetname);\n            setSelectedTestSetName(testsetnames[0]);\n            setValidTestsetName(valid_name);\n          }\n        } else {\n          alert(\"Need status !== 200 response status code\");\n        }\n      },\n      (err) => {\n        alert(\"Err logic needed reportlist.\");\n      }\n    );\n  }\n\n  return (\n    <div className=\"container border\">\n      <div className=\"form-row text-secondary\">\n        <h1>Completed Tests Reports</h1>\n      </div>\n      <div className=\"form-row justify-content-start border-bottom\">\n        <div className=\"form-group col-12 col-md-4\">\n          <label for=\"combox\" className=\"text-primary\">\n            Testset Name\n          </label>\n          <input\n            list=\"testsetnames\"\n            value={selectedTestSetName}\n            className=\"form-control\"\n            name={\"combobox\"}\n            placeholder=\"Enter quarry here\"\n            onChange={onChange}\n            id=\"combobox\"\n            disabled={\n              //disable the input if testsetnames are not arrays or if it is an array it is array of length zero.\n              !Array.isArray(testsetnames) || testsetnames.length === 0\n            }\n          />\n          {validTestsetName ? (\n            <span className=\"text-success\">Valid testsetname detected</span>\n          ) : (\n            <span className=\"text-warning\"> Invalid testsetname detected.</span>\n          )}\n        </div>\n        {\n          //if testsanmes are falsy render warning. otherwise render the dropdown list.\n          testsetnames.length === 0 ? (\n            <span className=\"form-text text-danger\">\n              Testset names are empty. Can't select from an empty list!\n            </span>\n          ) : (\n            <datalist id=\"testsetnames\">\n              {\n                //populate datalist with testsetnames.\n                testsetnames.map((testsetname) => (\n                  <option value={testsetname}>{testsetname}</option>\n                ))\n              }\n            </datalist>\n          )\n        }\n        <div className=\"form-group col-12 col-md-4\">\n          <label for=\"primaries\">Select A Report</label>\n          <select\n            value={selectedReportName}\n            id=\"select-option\"\n            className=\"form-control\"\n            onChange={onChange}\n            name=\"select\"\n            disabled={\n              !Array.isArray(testsetReportsValues) ||\n              testsetReportsValues.length === 0\n            }\n          >\n            {testsetnames.length > 0\n              ? testsetReportNames.map((option) => {\n                  return <option value={option}>{option}</option>;\n                })\n              : null}\n          </select>\n          {!Array.isArray(testsetReportsValues) ||\n          testsetReportNames.length === 0 ? (\n            <span className=\"form-text text-warning\">\n              No reports exist for the given test set.\n            </span>\n          ) : null}\n        </div>\n        <ServerStrip title={\"Testname Server Query Results\"} status={status} />\n        {testsetReportNames.length > 0 &&\n        notFalsy(filteredTestsetReports) &&\n        Object.keys(filteredTestsetReports).length > 0 ? (\n          <div className=\"form-group col-12\">\n            <h4>Select StatusCode Filter Options</h4>\n            <p>\n              Check a status code to include all request/response pairs which\n              resulted in checked statuscode.\n            </p>\n            <p>\n              Uncheck a status code to exclude all request/response pairs which\n              resulted in unchecked statuscode.\n            </p>\n            {buildStatusArrayFromCheckObject(checkBoxFilter).map((status) => (\n              <div className=\"form-check\">\n                <input\n                  name={status}\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  checked={checkBoxFilter[status]}\n                  onChange={statusFilterOnChange}\n                />\n                <label for={status} className=\"form-check-label\">\n                  {status}\n                </label>\n              </div>\n            ))}\n          </div>\n        ) : null}\n      </div>\n      {reportToRender}\n    </div>\n  );\n}\n\nexport default ReportList;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  checkProperty,\n  checkServerForExistance,\n  validateTestSet,\n  notFalsy,\n} from \"../../Validator/Validator\";\nimport { ServerStrip } from \"../../StaticComponents/ServerStrip\";\nimport { get_axios, post_axios } from \"../../Axios/axiosroutes\";\nimport { SubmitForm } from \"../SubmitForm/SubmitForm\";\n\nconst TESTSETNAME = \"testsetname\";\nconst REPORTNAME = \"report_name\";\nfunction RunList(props) {\n  let [status, setStatus] = useState(\"N/A\");\n  let [testsetnames, setTestsetnames] = useState([]);\n  let [selectedTestSetName, setSelectedTestsetName] = useState(\"\");\n  let [selectedForm, setSelectedForm] = useState(null);\n  let [reportName, setReportName] = useState(\"\");\n  let [validReportName, setValidReportName] = useState(\n    checkProperty(REPORTNAME, \"\")\n  );\n  const emptytestsets =\n    !Array.isArray(testsetnames) || testsetnames.length === 0;\n\n  //this function communicates whether or not a testsetname or reportname is found on the server\n  //404 is returned if testsetname isnt found and 200 if it is.\n  // in the context oif this function 404 is desirable since it means a ttestsetname is not in use,\n  // 200 is not since it means a testsetname or reportname is in use.\n\n  function processTestsetArray(response) {\n    let retVal = [];\n\n    if (notFalsy(response) && Array.isArray(response.data)) {\n      let { data } = response;\n\n      //extract testsetnames from each db object embedded in the array.\n      retVal = data.map((obj) => obj.testsetname);\n    }\n    return retVal;\n  }\n  function onChange({ target: { name }, target: { value } }) {\n    switch (name) {\n      case \"select\":\n        if (checkProperty(TESTSETNAME, value)) setSelectedTestsetName(value);\n        break;\n      case \"text\":\n        let validReportName = checkProperty(REPORTNAME, value);\n        if (validReportName || value === \"\") setReportName(value);\n        if (validReportName) {\n          checkServerForExistance(\n            \"report_name\",\n            selectedTestSetName,\n            value\n          ).then((resp) => {\n            resp.status === 200\n              ? setValidReportName(true)\n              : setValidReportName(false);\n          });\n        }\n        setValidReportName(validReportName);\n        break;\n    }\n  }\n\n  useEffect(() => {\n    get_axios(\"/gettestsetnames\").then((resp) => {\n      if (resp.status === 200) {\n        let processedTestsetnames = processTestsetArray(resp);\n        setTestsetnames(processedTestsetnames);\n      } else {\n        setTestsetnames([]);\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    if (notFalsy(selectedTestSetName)) {\n      post_axios(\"/posttestset\", {\n        testsetname: selectedTestSetName,\n      }).then((resp) => {\n        if (resp.status === 200) {\n          let testset = resp.data;\n\n          if (notFalsy(testset) && validateTestSet(testset))\n            setSelectedForm(testset);\n        }\n      });\n    }\n  }, [selectedTestSetName]);\n\n  useEffect(() => {\n    if (Array.isArray(testsetnames) && testsetnames.length > 0)\n      setSelectedTestsetName(testsetnames[0]);\n  }, [testsetnames]);\n\n  useEffect(() => {\n    setReportName(\"\");\n  }, [selectedTestSetName]);\n\n  function buildOptions() {\n    let nonEmptyTestsetnames = testsetnames.length > 0;\n\n    return nonEmptyTestsetnames ? (\n      testsetnames.map((testsetname) => (\n        <option value={testsetname}>{testsetname}</option>\n      ))\n    ) : (\n      <option value={null}>No tests discovered.</option>\n    );\n  }\n\n  function post_fork() {\n    if (\n      Array.isArray(testsetnames) &&\n      testsetnames.length >= 1 &&\n      validReportName\n    ) {\n      let post_object = {\n        testsetname: selectedTestSetName,\n        report_name: reportName,\n      };\n\n      post_axios(\"/forktestset\", post_object).then(\n        (resp) => {\n          let { status } = resp.status;\n          setStatus(status);\n\n          if (status === 200) setReportName(\"\");\n        },\n        (err) => setStatus(\"N/A\")\n      );\n    }\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"form-row\">\n        <div className=\"form-group col-12 col-md-5\">\n          <label for=\"select\">Testset Name</label>\n          <select\n            name=\"select\"\n            id=\"select\"\n            onChange={onChange}\n            className=\"form-control\"\n            value={selectedTestSetName}\n            disabled={emptytestsets}\n          >\n            {buildOptions()}\n          </select>\n          {emptytestsets ? (\n            <span className=\"form-text text-danger\">\n              No test sets exist. No reports can be generated.\n            </span>\n          ) : null}\n        </div>\n        <div className=\"form-group col-12 col-md-4\">\n          <label for=\"text\">Report Name</label>\n          <input\n            type=\"text\"\n            name=\"text\"\n            className=\"form-control\"\n            value={reportName}\n            onChange={onChange}\n            disabled={emptytestsets}\n          />\n          {emptytestsets ? (\n            <span className=\"form-text text-danger\">\n              No test sets exist. No reports can be generated.\n            </span>\n          ) : null}\n          {validReportName ? (\n            <span className=\"form-text text-success\">Reportname valid.</span>\n          ) : (\n            <span className=\"form-text text-danger\">\n              Report names only accept /[a-z0-9]/gi. If all valid characters\n              have been entered, the report name may be taken.Try a different\n              report name.{\" \"}\n            </span>\n          )}\n        </div>\n        <div className=\"form-group col-md-3\">\n          <label for=\"dispatch-button\" className=\"text-white\">\n            Hey!\n          </label>\n          <input\n            id=\"dispatch-button\"\n            type=\"button\"\n            className=\"btn btn-primary form-control\"\n            onClick={() => post_fork()}\n            value=\"Run-TestSet\"\n          ></input>\n          {emptytestsets ? (\n            <span className=\"form-text text-danger\">\n              No test sets exist. Button is disabled.\n            </span>\n          ) : null}\n        </div>\n      </div>\n      <ServerStrip status={status} />\n    </div>\n  );\n}\n\nexport default RunList;\n","import React from \"react\";\nimport hostpath from \"./hostpathtutorial.png\";\nimport forksports from \"./reqspersecforks.png\";\nimport datafetch from \"./datafetch.png\";\nimport editdelete from \"./editdelete.png\";\nimport selectreport from \"./selectreport.png\";\nimport checkbox from \"./checkbox.png\";\nimport report from \"./report.png\";\nimport runreport from \"./runreport.png\";\nfunction Tutorial() {\n  return (\n    <div className=\"container\">\n      <div className=\"form-row\">\n        <h1>The Serverbuster</h1>\n        <p>\n          This tool can flood routes on your server with Get, Put,Post, and\n          Delete HTTP requests. For routes that require header or body data,\n          like in the case of authentication or some other purpose, the user,\n          that's you and me, needs to generate this data. You should be familiar\n          with the basics of TCP and HTTP. I.e, know the tcp port your test\n          server runs on, and know the correct header or body contents to send\n          to your routes. This tool intended to be used on localhost, and it's\n          probably a terrible idea to expose it to the public network. The main\n          benefit in this tool is that you can try to simulate regular or even\n          extreme conditions. I.e, what happens if 10,000 users try to login at\n          the same time, or what happens if 5000 users post a comment in a\n          comment section and so on and so forth. It revolves around testsets,\n          configuration files of what host to spam, what routes to spam, and how\n          much to spam, and reports which just give you the results of each\n          request response hair by displaying the corresponding request and\n          response headers, body, and status code.\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1>The Testset</h1>\n        <p>\n          The testset is a configuration JSON that instructs the ServerSpam\n          microservice what to spam, how much to spam, how long to spam, and how\n          and where to get pre spam data. To explain everything, we'll use a\n          simple example. Suppose, I have a simple Node.js server that I'd like\n          to deploy for a customer. Locally, I chose to run that server on\n          localhost:3030 before deployment. This server has several routes.\n          <table className=\"table\">\n            <thead>\n              <td>Route</td>\n              <td>Method</td>\n              <td>Required Headers</td>\n              <td>Required Body</td>\n            </thead>\n            <tbody>\n              <tr>\n                <td>/login</td>\n                <td>Post</td>\n                <td>Cookies=username=..;password=..</td>\n                <td>No body required</td>\n              </tr>\n              <tr>\n                <td>/getaccountinfo</td>\n                <td>Post</td>\n                <td>Cookies=username=..;password=..</td>\n                <td>No body required</td>\n              </tr>\n              <tr>\n                <td>/makepost</td>\n                <td>Put</td>\n                <td>Cookies=username=..;password=..</td>\n                <td>{\"JSON Body: {username:string, postmsg:string}\"}</td>\n              </tr>\n            </tbody>\n          </table>\n        </p>\n        <p>\n          So far, what we know is that our server runs on localhost on TCP port\n          3030, and it exposes three routes. Say, I'd like to attempt accessing\n          these routes at a rate of 200 requests per second for a total of three\n          seconds. To do this, we need to create a new testset which can be\n          reached via New Test Set link on the nav bar. Here's an image of a\n          testset form which does that very thing.\n          <br></br>\n          <img src={hostpath} />\n          <br></br>\n          Up above, I'm creating a new testset. I gave it a testset name.\n          Testsetnames are unique and if I attempt to use an existing already\n          taken testsetname, it would be marked invalid; I would also not be\n          able to create the testset,so be sure to use unique non-existing\n          testset names!Further, you also see I selected localhost as my target\n          host, and you also see that I have added two paths. /login and\n          /getaccountinfo. I am also in the process of adding a third. To the\n          left of the Add-Endpoint button is the form that adds api-endpoints to\n          the pathlist. Eveyrthing else is pretty self explanatory, aside from\n          the dispatch order. The pathlist object stores the list of paths you'd\n          like to spam for each testset, and it follows this JSON definition,\n          assuming I added the third path:\n          <pre>\n            {JSON.stringify(\n              {\n                0: { method: \"post\", path: \"/login\" },\n                1: { method: \"post\", path: \"/getaccountinfo\" },\n                2: { method: \"put\", path: \"/makepost\" },\n              },\n              null,\n              2\n            )}\n          </pre>\n          For each set of paths, /login, /getaccountinfo, and /makepost, the\n          application expects a single set of data. (Set of data = user, in most\n          cases) More on this later. In any case, assuming the data set is\n          correctly generated, then three requests, are sent to the pathlist, in\n          the correct order:\n          <ol>\n            <li>Post to /login with the same dataset</li>\n            <li>Post to /getaccountinfo with the same dataset</li>\n            <li>Put to /makepost with the same dataset </li>\n          </ol>\n          After all three paths have been transacted with, the app will then\n          follow the same procudure, but advance to the the next data element.\n          In this example, its useful to think of these data elements as perhaps\n          simulating different users visiting all three routes.\n        </p>\n        <p>\n          The final part of the testset configuration involves specifying a tcp\n          port, requests per second, requests persecond duration, number of\n          forks, and fetching of data.\n          <img src={forksports} />\n          <br></br>\n          Above, I am instructing the Serverspam microservice to send requests\n          to TCP port 3030. The reqspersecond field simply specifies how many\n          requests per second I'd like to dispatch. The secondduration field\n          specifies how many seconds the Serverspam microservice will spam the\n          server. In the example above, I am spamming 200 reqs per second for 3\n          seconds, so a total of 600 requests will be sent over three seconds if\n          the Node event loop behaves nice.\n        </p>\n\n        <p>\n          <h2 className=\"badge badge-primary\">Field breakdown:</h2>\n          <p>\n            {\" \"}\n            With the example above, here's an easy to digest table that defines\n            all of the relevant fields.\n          </p>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">fieldname</th>\n                <th scope=\"col\">definition</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>testsetname</td>\n                <td>A unique name that identifies the testset</td>\n              </tr>\n              <tr>\n                <td>hostname</td>\n                <td>the hostname where requests will be funneled to</td>\n              </tr>\n              <tr>\n                <td>http/https</td>\n                <td>\n                  Use http or https to dispatch requests.Currently, only http\n                  supported.\n                </td>\n              </tr>\n\n              <tr>\n                <td>API-Endpoint</td>\n                <td>The Endpoint to target on hostname:tcpport.</td>\n              </tr>\n              <tr>\n                <td>Dispatch-Order</td>\n                <td>\n                  For one unique set of paths and data element, this field\n                  determines the order in which the request will be dispatched\n                  to the path. 0 = first path, 1 = second path, and etc\n                  perdataset or user.\n                </td>\n              </tr>\n              <tr>\n                <td>Endpoint HTTP Method</td>\n                <td>\n                  The method with which to dispatch requests for the\n                  corresponding dispatch order.\n                </td>\n              </tr>\n              <tr>\n                <td>TCP Port Of Test-Server</td>\n                <td>\n                  The TCP Port # which your test server will be listening on.\n                </td>\n              </tr>\n\n              <tr>\n                <td># Of TestSets Forks</td>\n                <td>\n                  If one Node.js process cannot handle the request load you'd\n                  like to spam your server with,you can fork several copies of\n                  it.Note the same dataset will be used in each fork.\n                </td>\n              </tr>\n              <tr>\n                <td>Reqs Per Second To Dispatch</td>\n                <td>\n                  The number of requests per second you'd like to dispatch.\n                </td>\n              </tr>\n              <tr>\n                <td>Second Duration</td>\n                <td>The second duration of the Reqs Per Second dispatch.</td>\n              </tr>\n              <tr>\n                <td>Datafetch</td>\n                <td>\n                  Set to true if you'd like to fetch data before beginning spam.\n                  For get requests this isn't required. For put, post, and\n                  delete, this may be required since your server routes may need\n                  headers or a body to fully carry out their duties. The\n                  datafetching routine is covered below.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1 className=\"col-12\">Datafetching</h1>\n        <p>\n          The data set consists of data elements. In the context of the example\n          above, each data element can be thought of as something representing a\n          user. Each data element is then used to post the set of routes\n          specified in the testset in the exact dispatch order. In the example\n          above, one data element is used for /login, /getaccountinfo, and\n          /makepost. This app requires that you have mongoDB installed, that you\n          automatically generate your data, and that your data be in a simple\n          but very specific format. First, the dataset itself must be an Array,\n          and second the structure of each element is as follows.\n          <pre>\n            {JSON.stringify(\n              [\n                {\n                  headers: {\n                    username: \"1\",\n                    password: \"1\",\n                  },\n                  body: '{postMsg:\"Hi from user 1!\"}',\n                },\n                {\n                  headers: {\n                    username: \"2\",\n                    password: \"2\",\n                  },\n                  body: '{postMsg:\"Hi from user 2!\"}',\n                },\n              ],\n              null,\n              2\n            )}\n          </pre>\n          Each data element in the array must be an object with a defined\n          headers and body property, and again, it's useful to think of these\n          data elements as users, and again, each data element will be used on\n          the pathlist set specified in the testset. I don't think this should\n          limit anyone too much, since its fairly straightforward to generate\n          this data in the language of your choice and convert it to JSON before\n          sending it back to the app.\n          <em>\n            Under normal conditions, the server can send the client information\n            in headers and body. For example, if I login to a website, I might\n            get a sessionID in my cookies. At this time, the application expects\n            all server supplied information, such as cookies and etc., to be\n            supplied in the user generated dataset. Basically, the app does not\n            track client state like the browser does, but this feature will be\n            added in the future.\n          </em>\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1>Configuring Datafetching</h1>\n        <p>\n          Configuring datafetching is ,more or less, the same as configuring\n          your testset. The application assumes the test data will be accesible\n          via an HTTP endpoint. This shouldn't be too much of a limitation. I\n          found it easy to add a datafetch route to the server I was testing.\n          Here's an image of the data portion of the test form below.\n          <br></br>\n          <img src={datafetch} />\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th scope=\"col\">fieldname</th>\n                <th scope=\"col\">definition</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>Data Hostname</td>\n                <td>The hostname of the system supplying the data.</td>\n              </tr>\n              <tr>\n                <td>/Path/On/Datapoint</td>\n                <td>The API endpoint of the data used by the testset.</td>\n              </tr>\n\n              <tr>\n                <td>TCP Port Of Data Server</td>\n                <td>\n                  The TCP port of hostname application supplying the data.\n                </td>\n              </tr>\n\n              <tr>\n                <td>HTTP(S) Method</td>\n                <td>\n                  The method with which to access the data with on the API\n                  endpoint.\n                </td>\n              </tr>\n              <tr>\n                <td>Header Name</td>\n                <td>\n                  A header key that can be be added to the request value, but\n                  only with a paired header value\n                </td>\n              </tr>\n              <tr>\n                <td>Header Value</td>\n                <td>\n                  The value of a header key. Both the header name and header\n                  value must contain valid values, in order to be added.\n                </td>\n              </tr>\n              <tr>\n                <td>Datafetch</td>\n                <td>\n                  Set to true if you'd like to fetch data before beginning spam.\n                  For get requests this isn't required. For put, post, and\n                  delete, this may be required since your server routes may need\n                  headers or a body to fully carry out their duties. The\n                  datafetching routine is covered below.\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1> Edit And Delete</h1>\n        <p>\n          {\" \"}\n          You can edit or delete testsets. To access this feature, click on the\n          Edit/Delete-Test-Set link. Type in the name of your target testset in\n          the combobox, and select whether or not you'd like to delete or edit a\n          testset using the select dropdown. If you are editing a testset,\n          you'll be allowed to enter and change values into the form. If you are\n          deleting a testset, the form will be disabled. Scroll down to the\n          bottom of the page. If all testset fields contain valid values, click\n          the Update or Delete button. Editing a testset replaces the old\n          testset value with the new testvalue. Deleting a testset will remove\n          the testset from the database and remove all testsets associated with\n          the testset.\n          <br></br>\n          <img src={editdelete}></img>\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1>Viewing Reports</h1>\n        <p>\n          You can view reports by selecting a testset name from the testset\n          combo box, and a report name from the select drop down. The select\n          drop down will be disabled if no reports exist for a given testset.\n          <br></br>\n          <img src={selectreport}></img>\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1>Filtering reports by Status</h1>\n        <p>\n          {\" \"}\n          After a report has been selected, and if said report is a non empty\n          report, you will see status code checkbox list. These checkboxes and\n          their numeric labels represents all of the status code responses\n          returned for that particular report. If you encounter a -1 status code\n          checkbox, this means there was an error with a specific response. This\n          most likely is a timeout error or a tcp socket hangout. You will also\n          see a pathlist drop down. This dropdown represents the different paths\n          the report sent requests to.\n          <br></br>\n          {<img src={checkbox}></img>}\n        </p>\n        <h1>The Report</h1>\n        <p>\n          {\" \"}\n          Each report contains a set of req and res pairs dispatched on a\n          specific path. In my example, I selected the /login route, so I will\n          be able to view all reports for all different users sent to this\n          route. You can filter out reqres pair by unchecking their status code.\n          For example, in the image below, I unchecked status codes 200 and 400,\n          so that I can only see the req res pairs which threw an error. If\n          there was an error, the error is described in the response report body\n          section. You can also cycle through the backing array using the number\n          select labeled dispatch order. When no status codes have been filtered\n          out, this ordering should represent the order which the requests hit\n          the back end. That is, the zeroth req/res pair was the first request\n          sent to the path, the first is the second, and so on and so forth.\n          When requests are filtered out by status, they are pulled out of the\n          backing array and the survivors are spliced together. In a nutshell,\n          indices are not preserved but relative numerical ordering is.{\" \"}\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <img src={report} />\n        </p>\n      </div>\n      <div className=\"form-row\">\n        <h1>Running A Testset</h1>\n        <p>\n          Running a testset is easy. You can access this feature through the\n          navbar link Run-TestSet.Select a testset name from the select dropdown\n          and type in a report name in the text input to the right. You'll get a\n          warning if the report name is already taken or invalid. Also note that\n          the very first forked process takes on the original report name while\n          any forks after have their fork number appended to the report name.\n          <br></br> <br></br>\n          <br></br> <br></br>\n          <img src={runreport} />\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Tutorial;\n","import React, { useLayoutEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CreateForm from \"./StatefulComponents/SubmitForm/CreateForm\";\nimport Nav from \"./StatefulComponents/Nav/Nav\";\nimport { FormList } from \"./StatefulComponents/ListComponent/FormList\";\nimport { notFalsy } from \"./Validator/Validator\";\nimport ReportList from \"./StatefulComponents/ListComponent/ReportList\";\nimport RunList from \"./StatefulComponents/RunListComponent/RunList\";\nimport Tutorial from \"./StaticComponents/Tutorial\";\nlet appMargin = <div style={{ \"margin-top\": \"100px\" }}></div>;\n//List options\nconst edit_test = \"Edit-Test\";\nconst delete_test = \"Delete-Test\";\nconst create_test = \"Create-Test\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        {appMargin}\n        <Switch>\n          <Route exact path=\"/tutorials\">\n            <Tutorial />\n          </Route>\n          <Route exact path=\"/editset\">\n            <FormList\n              dropdown_options={[edit_test, delete_test]}\n              title=\"Choose a Test-Set and a Corresponding Action\"\n            />\n          </Route>\n          <Route exact path=\"/newset\">\n            <CreateForm />\n          </Route>\n          <Route exact path=\"/reports\">\n            <ReportList />\n          </Route>\n          <Route exact path=\"/runset\">\n            <RunList />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap.js\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}